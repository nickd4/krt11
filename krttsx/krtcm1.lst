KRTCM1	Misc commands overlay	MACRO V05.03b  00:00
Table of contents

    3-   1	KRTMAC	Various handy constants and macros
    5-   2	Utility macros
    6-   6	Local data		; /63/ consolidated here..
    7-   3	The SET command		; /BBS/ just about all new..
    8-   2	SET CLn LINE x		; /BBS/ this is all new..
    9-   2	SET CL LINE * processor
   10-   2	The CONNECT command	; /BBS/ heavily modified
   11-   2	The TAKE command	; /BBS/ heavily hacked ..
   12-   2	Local DIRECTORY and SPACE commands  ; /BBS/ modified a bit
   13-   2	MOUNT, DISMOUNT a logical disk  (TSX+ only)  ; /BBS/ all new
   14-   2	The local TYPE command	; /BBS/ heavily hacked..
   15-   2	SHOW LINE		; /BBS/ moved here, added defterm
   16-   2	Cleanup before exiting to monitor	; /BBS/ enhanced
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 1


      1						.title	KRTCM1	Misc commands overlay
      2						.ident	"V03.63"
      3
      4					; /63/	27-Sep-97  Billy Youdelman  V03.63
      5					;
      6					;	moved sph$xmode after set$modem so it will prevail..
      7					;	fixed problem caused by using errtxt buffer to store desired xmode
      8					;	where a "?" in a error message acted like SET PHONE XMODE ?
      9
     10					; /62/	27-Jul-93  Billy Youdelman  V03.62
     11					;
     12					;	make type append a LF to CR if CR not followed by one
     13					;	hose hi bit and type anyway for VT100 and below in c$type
     14
     15					; /BBS/	 1-Dec-91  Billy Youdelman  V03.61
     16					;
     17					;	c$type defaults to .LST, error handling improved, does wildcards
     18					;	also sped up, types any size record, binary file filtering added
     19					;
     20					;	c$set - error handling fixed
     21					;	c$pwd, c$cls, c$clx, c$xmodem added..
     22					;	c$take parses file name, checks for/disallows wildcards, etc.
     23					;	c$conn - disallow connect to TT (since one is there already..)
     24					;	mount/dismount logical disks command interface, calls TSX emts
     25					;	added RT-11 style assign default device, for DK only
     26					;	remote disk_usage passes optional device argument
     27					;	reinit modem when exiting if DTR dropped during CONNECT
     28					;	added SET CLn LINE x support for TSX-Plus
     29					;	added search path for take files
     30					;	move sho$line here, added modem type, TSX line # and DCD status
     31					;	added call to c$idle in c$exit to reset modem on exit to monitor
     32					;	c$set now does multiple args, separated by commas
     33
     34					;	Copyright 1983,1984 Change Software, Inc.
     35					;
     36					;	Creation: 16-Oct-84  15:38:44  Brian Nelson
     37					;
     38					;	This software is furnished under a license and may
     39					;	be  used  and  copied  only in accordance with the
     40					;	terms of such license and with  the  inclusion  of
     41					;	the  above copyright notice.  This software or any
     42					;	other copies thereof may not be provided or other-
     43					;	wise made available to any other person.  No title
     44					;	to and ownership of the software is hereby  trans-
     45					;	ferred.
     46					;
     47					;	The information in this  software  is  subject  to
     48					;	change  without notice and should not be construed
     49					;	as a commitment by the author.
     50					;
     51					;	12-Sep-86  10:39:27 BDN Convert for I/D space
     52
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 2


      1
      2						.include "IN:KRTMAC.MAC"
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 3
KRTMAC	Various handy constants and macros

      1						.sbttl	KRTMAC	Various handy constants and macros
      2					;	.ident	"V03.63"		; this is an .include file
      3
      4					; /63/	27-Sep-97  Billy Youdelman  V03.63
      5					;
      6					;	add support for SET ATTRIBUTES
      7					;	add flag to suspend logging to a disk file
      8					;	make $LN$MAX 132. bytes for EIS assembly
      9					;	pulled message macro, no longer used..
     10
     11					; /62/	27-Jul-93  Billy Youdelman  V03.62
     12					;
     13					;	move dispatch macro to KRTSER
     14					;	move erbfsiz here from KRTPAK
     15					;	condense logging (debug) modes
     16					;	increase efficiency of incm64 macro
     17					;	increase MAXLNG (long-packet size) to 1920.
     18					;	reduce MAXLNG to 600. for NONEIS assembly, so pgm loads under FB..
     19					;	ditto for ALSIZE (phone # buffer) and LN$CNT (SL # of lines saved)
     20
     21					; /BBS/	 1-Dec-91  Billy Youdelman  V03.61
     22					;
     23					;	modified message macro to call .newline instead of saving CR/LF
     24					;	and null for each new line, knocking 1042. bytes off the size
     25					;	of this version..  also changed ".print" emulation to wrtall,
     26					;	for a similar savings in compiled program size.
     27					;
     28					;	dump raw I/O logging from log$al (SET DEB ALL) - too confusing
     29					;	also pulled log$rp out and made it a completely separate item..
     30					;
     31					;	added a couple upper case macros
     32
     33					;	include file for Kermit-11
     34					;
     35					;	Brian Nelson  01-Dec-83  13:56:12
     36
     37						.NLIST	BEX
     38						.LIST	MEB			; /62/
     39
     40		000001 				KRTINC	=	1		; for .include error checking
     41
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 4
KRTMAC	Various handy constants and macros

      1
      2	000000					.psect	$code	,ro,i,lcl,rel,con ; psect ordering..
      3	000000					.psect	$pdata	,ro,d,lcl,rel,con
      4
      5					;	various ascii chars
      6		000001 				SOH	=   1		; default packet start of header
      7		000007 				BELL	=   7		; beep
      8		000010 				BS	=  10		; backspace
      9		000011 				TAB	=  11		; tab
     10		000012 				LF	=  12		; line feed
     11		000014 				FF	=  14		; form feed
     12		000015 				CR	=  15		; carriage return
     13		000016 				CTRL$N	=  16		; ^N VT-100 line drawing on
     14		000017 				CTRL$O	=  17		; ^O VT-100 line drawing off
     15		000021 				XON	=  'Q&37	; ^Q
     16		000023 				XOFF	=  'S&37	; ^S
     17		000033 				ESC	=  33		; escape
     18		000040 				SPACE	=  40
     19		000054 				COMMA	=  54
     20		000056 				DOT	=  56		; /63/
     21		000073 				SCOLON	=  73		; /63/
     22		000176 				TILDE	= 176		; /63/
     23		000177 				DEL	= 177		; delete
     24
     25					;	system data locations
     26		000044 				JSW	= 44		; job status word
     27		000052 				ERRBYT	= 52		; emt error byte
     28		000053 				USERRB	= 53		; /62/ user error byte
     29		000001 					SUCCS$	=  1	; no error
     30		000002 					WARN$	=  2	; warning
     31		000004 					ERROR$	=  4	; error
     32		000010 					SEVER$	= 10	; sever error
     33		000020 					FATAL$	= 20	; fatal error
     34
     35					;	byte offsets into SINIT parameter vector
     36		000000 				P.SPSIZ	= 0		; set packet length
     37		000001 				P.TIME	= 1		; time-out
     38		000002 				P.NPAD	= 2		; number of pad chars
     39		000003 				P.PADC	= 3		; the pad character
     40		000004 				P.EOL	= 4		; eol char
     41		000005 				P.QCTL	= 5		; control char quoting
     42		000006 				P.QBIN	= 6		; 8-bit quote
     43		000007 				P.CHKT	= 7		; checksum type
     44		000010 				P.REPT	= 10		; repeated character prefix
     45		000011 				P.CAPAS	= 11		; capability bitmask
     46		000010 					CAPA.A	= 10	; attribute handling
     47		000002 					CAPA.L	= 2	; /42/ long packets
     48		000004 					CAPA.S	= 4	; /42/ sliding windows
     49		000012 				P.WINDS	= 12		; /43/ window size, # of packets
     50		000013 				P.MXL1	= 13		; /43/ high order of long packet size
     51		000014 				P.MXL2	= 14		; /43/ low order of long packet size
     52		000017 				P.VEND	= 17		; end of parameter vector
     53
     54					; /62/	bits in doattr (file attribute processing)
     55		000001 				AT.CDT	=: 1		; create date
     56		000002 				AT.INF	=: 2		; /63/ system specific info
     57		000004 				AT.LEN	=: 4		; length
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 4-1
KRTMAC	Various handy constants and macros

     58		000010 				AT.PRO	=: 10		; file protection
     59		000020 				AT.SYS	=: 20		; system ID
     60		000040 				AT.TYP	=: 40		; file type
     61		000100 				AT.XLE	=: 100		; exact length in bytes
     62		100000 				AT.ON	=: 100000	; /63/ do attribute processing
     63		000177 				AT.ALL	=: AT.CDT!AT.INF!AT.LEN!AT.PRO!AT.SYS!AT.TYP!AT.XLE
     64
     65					;	bits in trace (debug status word)
     66		000001 				LOG$PA	= 1		; log all packets
     67		000002 				LOG$CO	= 2		; /62/ CONNECT logging to disk
     68		000004 				LOG$RP	= 4		; /62/ rpack chars to TT
     69		000010 				LOG$IO	= 10		; /62/ everything received or sent
     70		000020 				LOG$DE	= 20		; /62/ debugging to TT
     71		040000 				LOG$ON	= 40000		; /63/ set to write to disk, clear to suspend
     72		100000 				LOG$OP	= 100000	; logfile is open
     73		000003 				LOG$AL	= LOG$PA!LOG$CO	; /62/ ALL
     74
     75					;	parity options
     76		000000 				PAR$NO	=: 0		; none
     77		000001 				PAR$OD	=: 1		; odd
     78		000002 				PAR$EV	=: 2		; even
     79		000003 				PAR$MA	=: 3		; mark
     80		000004 				PAR$SP	=: 4		; space
     81
     82					;	file types
     83		177777 				TERMINAL=: -1		; file to term ala xreply, not to disk
     84		000000 				TEXT	=:  0		; normal ascii text files
     85		000001 				BINARY	=:  1		; image mode
     86		000002 				DECNAT	=:  2		; /52/ 8-bit text files
     87
     88					;	terminal types
     89		000000 				NOSCOPE	= 0		; /BBS/ hard copy terminal
     90		000001 				TTY	= 1		; a dumb tube terminal
     91		000002 				VT100	= 2		; itself
     92		000003 				VT200	= 3		; ditto..
     93
     94					;	supported CVT$$ cvt_bit_pattern bits
     95		000004 				C.CRLF	= 4		; discard CR LF FF ESC
     96		000010 				C.LSPA	= 10		; discard leading spaces and tabs
     97		000020 				C.SSPA	= 20		; reduce spaces and tabs to a single space
     98		000040 				C.LCUC	= 40		; lower case to upper case
     99		000200 				C.TSPA	= 200		; discard trailing spaces and tabs
    100
    101		000034 				CON$ESC	=  '\-100	; default CONNECT escape char
    102		000170 				ERBFSIZ	=  120.		; /62/ error msg text buff size
    103		000136 				MAXPAK	=:  94.		; /63/ max_packet_length - max_checksum_length
    104
    105						.if df	NONEIS		; /62/ using NONEIS for convenience..
    106						ALSIZE	=   1000	; /63/ bufsiz for SET DIAL/PHO NUM
    107						LN$CNT	=      3.	; /62/ save/recall 3. commands
    108						LN$MAX	=     80.	; /63/ max command line length
    109						MAXLNG	=    600.	; /63/ so image is small enuff to run
    110						.iff
    111		002000 				ALSIZE	=   2000	; /62/ bufsiz for SET DIAL/PHO NUM
    112		000012 				LN$CNT	=     10.	; /63/ save/recall 10. commands
    113		000204 				LN$MAX	=    132.	; /63/ max command line length
    114		003600 				MAXLNG	=   1920.	; /63/ use max long-packet buff size
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 4-2
KRTMAC	Various handy constants and macros

    115						.endc
    116		003614 				$ALLSIZ	= <MAXLNG+14>&177776 ; /62/ make it this for safety
    117
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 5
KRTMAC	Various handy constants and macros

      1
      2						.sbttl	Utility macros
      3
      4						.macro	.br to		; /63/ added
      5						.if df	to
      6						.if ne	to-.
      7						.error	<; not at location to;>
      8						.endc
      9						.endc
     10						.endm	.br
     11
     12						.macro	.chksp	arg
     13						.ntype	$$5	,arg
     14						.iif eq <<$$5&7>-6> .error arg <; Illegal use of SP (r6) in call>
     15						.endm	.chksp
     16
     17						.macro	calls	name	,arglst
     18					;	subroutine call with arguments passed in an area pointed to by r5
     19					;	(as with F4 and BP2).  all args are pushed onto the stack in the
     20					;	order specified.  r5 points to the sp before the call and is saved
     21					;	and restored.
     22						$$ = 0				; init # of args count
     23						  .irp x ,<arglst>		; count up # of args passed
     24						  $$ = $$+1			; one at a time
     25						  .endr				; got it
     26						.if eq $$			; no args present?
     27						jsr	pc	,name		; if so, substitute a simple call
     28						.iff				; at least one arg in <arglst>
     29						mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
     30						  .if eq $$-1			; is it one or more than one arg?
     31						  .chksp	arglst		; one arg, check for legal SP modes
     32						  mov	arglst	,-(sp)		; doing it thusly generates less code
     33						  mov	sp	,r5		; set pointer to argument list
     34						  jsr	pc	,name		; call the subroutine
     35						  tst	(sp)+			; pop parameter list from stack
     36						  mov	(sp)+	,r5		; /63/ restore r5
     37						  .iff				; arg_count > 1
     38						  $$2 = $$			; extract the args in
     39						    .rept	$$		; reverse order so that
     40						    $$1 = 0			; we might save a little
     41						      .irp x ,<arglst>		; core (four words)
     42						      $$1 = $$1+1		; scan the arg list until we come to
     43						        .if eq $$2-$$1		; the last one before one we just did
     44						        .chksp	x		; check for SP addressing mode
     45						        mov	x	,-(sp)	; push it
     46						        .mexit			; and exit the .irp
     47						        .endc
     48						      .endr
     49						    $$2 = $$2-1			; backwards to previous arg
     50						    .endr
     51						  mov	sp	,r5		; set up the argument list pointer
     52						  jsr	pc	,name		; and go to the routine
     53						  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
     54						  .iif gt <$$-2>  add	#$$*2	,sp	; gen "add 2*argnum ,sp"
     55						  mov	(sp)+	,r5		; /63/ restore r5
     56						  .endc
     57						.endc
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 5-1
Utility macros

     58						.endm	calls
     59
     60						.macro	ctl	src ,dst
     61						clr	-(sp)
     62						bisb	src	,@sp
     63						call	l$xor
     64						movb	(sp)+	,dst
     65						.endm	ctl
     66
     67						.macro	copyz	from ,to ,maxlen
     68						.if  b	<maxlen>
     69						clr	-(sp)
     70						.iff
     71						mov	maxlen	,-(sp)
     72						.endc
     73						mov	from	,-(sp)
     74						mov	to	,-(sp)
     75						call	copyz$
     76						.endm	copyz
     77
     78						.macro	deccvt	val ,buf ,width
     79						mov	r5	,-(sp)
     80						.if  b	<width>
     81						clr	-(sp)
     82						.iff
     83						mov	width	,-(sp)
     84						.endc
     85						mov	val	,-(sp)
     86						mov	buf	,-(sp)
     87						mov	sp	,r5
     88						call	l$cvtnum
     89						add	#6	,sp
     90						mov	(sp)+	,r5
     91						.endm	deccvt
     92
     93						.macro	decout	val
     94						mov	r5	,-(sp)
     95						mov	val	,-(sp)		; /62/ l$wrdec pops this buffer
     96						mov	sp	,r5
     97						call	l$wrdec
     98						mov	(sp)+	,r5
     99						.endm	decout
    100
    101						.macro	direrr	val
    102						mov	val	,-(sp)
    103						call	direr$
    104						.endm	direrr
    105
    106						.macro	incm64	val
    107						inc	val
    108						bic	#^c<77>	,val		; /62/ faster
    109						.endm	incm64
    110
    111						.macro	indexm	reg		; check for auto increment/decrement
    112						.ntype	$$$0	,reg		; modes for macros that can't have..
    113						.if  ne	$$$0-27			; always allow pc autoincrement
    114						$$$0 =	<$$$0&177770>/10	; ..these modes in their arg list
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 5-2
Utility macros

    115						.ift				; get the mode into 0..7
    116						  .if  ge $$$0-2		; if mode >=2 and mode <=5 then error
    117						  .iif ge <5-$$$0> .error      <; Can't use auto inc/dec mode here>
    118						  .endc
    119						.endc
    120						.endm	indexm
    121
    122						.macro	ixor	reg ,dst
    123					;	get around the mode restrictions for the hardware XOR instruction
    124					;	and fix for RT-11 systems that don't have the EIS chip option
    125						.chksp	reg			; can't allow sp args
    126						.chksp	dst			; in either register
    127						indexm	reg			; check for allowed
    128						indexm	dst			; addressing mode
    129						mov	reg	,-(sp)		; it's much simpler to do this
    130						bic	dst	,@sp		; for all RT-11 systems rather
    131						bic	reg	,dst		; than to be selective
    132						bis	(sp)+	,dst		; done
    133						.endm	ixor
    134
    135						.macro	.newline		; print CR/LF on TT
    136						call	l$pcrlf
    137						.endm	.newline
    138
    139						.macro	octout	val
    140						calls	l$wroct	,<val>
    141						.endm	octout
    142
    143						.macro	prsbuf	dst
    144						mov	dst	,r0
    145						call	prsarg
    146						.endm	prsbuf
    147
    148						.macro	rpack	len.a ,pakn.a ,msg.a ,max.len	; /62/
    149						sub	#10	,sp
    150						mov	sp	,r1
    151						calls	rpack$	,<msg.a,r1,max.len>
    152						mov	(r1)+	,len.a
    153						mov	(r1)+	,pakn.a
    154						mov	@r1	,r1
    155						add	#10	,sp
    156						.endm	rpack
    157
    158						.macro	save	list
    159						.if  b	<list>
    160						 save	<r0,r1,r2,r3,r4,r5>
    161						.iff
    162						.irp	x ,<list>
    163						 mov	x	,-(sp)
    164						.endr
    165						.endc
    166						.endm	save
    167
    168						.macro	scan	ch ,str
    169						mov	str	,-(sp)
    170						clr	-(sp)
    171						bisb	ch	,@sp
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 5-3
Utility macros

    172						call	scanch
    173						.endm	scan
    174
    175						.macro	setpar	src ,dst
    176						movb	src	,-(sp)
    177						call	dopari
    178						movb	(sp)+	,dst
    179						.endm	setpar
    180
    181						.macro	spack	type ,pnum ,len ,msg
    182						.if  b	<len>
    183						.iif nb	<msg>	.error	<; bad call to SPACK macro>
    184						calls	spack$	,<type,pnum,#0,#null>
    185						.iff
    186						calls	spack$	,<type,pnum,len,msg>
    187						.endc
    188						.endm	spack
    189
    190						.macro	strcat	dst ,src
    191						mov	src	,-(sp)
    192						mov	dst	,-(sp)
    193						jsr	pc	,strcat
    194						.endm	strcat
    195
    196						.macro	strcpy	dst ,src
    197						mov	src	,-(sp)
    198						mov	dst	,-(sp)
    199						jsr	pc	,strcpy
    200						.endm	strcpy
    201
    202						.macro	strlen	string
    203						mov	string	,r0
    204						call	l$len
    205						.endm	strlen
    206
    207						.macro	textsrc	text
    208						.if  b	<text>
    209						clr	getcroutine		; /62/ reset to file I/O
    210						clr	tgetaddr
    211						.iff
    212						mov	#tgetcr0,getcroutine
    213						mov	text	,tgetaddr
    214						.endc
    215						.endm	textsrc
    216
    217						.macro	tochar	src ,dst
    218						clr	-(sp)
    219						bisb	src	,@sp
    220						add	#40	,@sp
    221						movb	(sp)+	,dst
    222						.endm	tochar
    223
    224						.macro	unchar	src ,dst
    225						clr	-(sp)
    226						bisb	src	,@sp
    227						sub	#40	,@sp
    228						movb	(sp)+	,dst
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 5-4
Utility macros

    229						.endm	unchar
    230
    231						.macro	unsave	list
    232						.if b <list>
    233						unsave	<r5,r4,r3,r2,r1,r0>
    234						.iff
    235						.irp	x ,<list>
    236						 mov	(sp)+	,x
    237						.endr
    238						.endc
    239						.endm	unsave
    240
    241						.macro	upcase	s		; /BBS/ added ..
    242						mov	s	,r0
    243						call	upcase			; /BBS/ upcase until null terminator
    244						.endm	upcase
    245
    246						.macro	upone	s		; /BBS/ added ..
    247						mov	s	,r0
    248						call	upone			; /BBS/ upcase only to next delimiter
    249						.endm	upone
    250
    251						.macro	wrtall	arg		; IO.WAL for an .asciz string
    252						mov	arg	,-(sp)		; pass the address
    253						call	wrtall			; do it
    254						.endm	wrtall
    255
    256						.macro	xor	reg ,dst
    257						ixor	reg	,dst
    258						.endm	xor
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 6
Utility macros

      1						.iif ndf  KRTINC  .error	<; .include for IN:KRTMAC.MAC failed>
      2
      3						.mcall	.PURGE	,.SPFUN		; /62/
      4
      5
      6						.sbttl	Local data		; /63/ consolidated here..
      7
      8	000000					.psect	$rwdata	,rw,d,lcl,rel,con
      9	000000	000000 			crflag:	.word	0			; /62/ TYPE uses to add LF to lone CR
     10	000002	000000 			itsmine:.word	0			; device is already allocated flag
     11	000004	000030'	000051'	000072'	tk.0:	.word	T10$ ,T30$ ,T50$ ,T70$ ,0	; addresses of names to try
     12	000016	000034'	000055'	000075'	tk.1:	.word	T20$ ,T40$ ,T60$ ,T80$ ,0	; put actual file name here
     13	000030	   124 	   101 	   113 	 T10$:	.ascii	"TAK:"				; this is the take file
     14	000034	   040 	   040 	   040 	 T20$:	.asciz	"            "			; search path..
     15	000051	   113 	   122 	   124 	 T30$:	.ascii	"KRT:"
     16	000055	   040 	   040 	   040 	 T40$:	.asciz	"            "
     17	000072	   104 	   113 	   072 	 T50$:	.ascii	"DK:"
     18	000075	   040 	   040 	   040 	 T60$:	.asciz	"            "
     19	000112	   123 	   131 	   072 	 T70$:	.ascii	"SY:"
     20	000115	   040 	   040 	   040 	 T80$:	.asciz	"            "
     21	000132	   103 	   114 	   156 	cl.nam:	.asciz	"CLn:"			; ascii copy of CL name with unit #
     22						.even
     23
     24	000000					.psect	$pdata
     25	000000	000012'	000017'	000023'	parlst:	.word	P00$ ,P10$ ,P20$ ,P30$ ,P40$	; parity display in SHOW LINE
     26	000012	   116 	   117 	   116 	 P00$:	.asciz	"NONE"
     27	000017	   117 	   104 	   104 	 P10$:	.asciz	"ODD"
     28	000023	   105 	   126 	   105 	 P20$:	.asciz	"EVEN"
     29	000030	   115 	   101 	   122 	 P30$:	.asciz	"MARK"
     30	000035	   123 	   120 	   101 	 P40$:	.asciz	"SPACE"
     31	000043	   040 	   143 	   154 	cm1.01:	.asciz	" closed"<cr><lf>	; shared string: TAKE, defterm
     32	000055	   040 	   157 	   160 	cm1.02:	.asciz	" opened"<cr><lf>
     33	000067	   040 	   106 	   151 	cm1.03:	.asciz	" Files copied:"<cr><lf>
     34	000110	   077 	   124 	   131 	cm1.04:	.asciz	"?TYPE-W-Binary file filter enabled"<cr><lf>
     35	000155	   040 	   164 	   157 	cm1.05:	.asciz	" to TT:"<cr><lf>
     36	000167	   114 	   151 	   156 	cm1.06:	.asciz	"Link device is "
     37	000207	   124 	   124 	   072 	cm1.07:	.asciz	"TT:   "
     38	000216	   040 	   166 	   151 	cm1.08:	.asciz	" via Line #"
     39	000232	   040 	   040 	   040 	cm1.09:	.asciz	"   Priority: "
     40	000250	   040 	   040 	   040 	cm1.10:	.asciz	"   Speed: "
     41	000263	   116 	   057 	   101 	cm1.11:	.asciz	"N/A"
     42	000267	   057 	   000 		cm1.12:	.asciz	"/"
     43	000271	   040 	   155 	   157 	cm1.13:	.asciz	" modem is on-line   "
     44	000316	   104 	   124 	   122 	cm1.14:	.asciz	"DTR: "
     45	000324	   040 	   040 	   040 	cm1.15:	.asciz	"   DCD: "
     46	000335	   040 	   040 	   040 	cm1.16:	.asciz	"   RTS: "
     47	000346	   040 	   040 	   040 	cm1.17:	.asciz	"   CTS: "
     48	000357	   106 	   154 	   157 	cm1.18:	.asciz	"Flow-Control: "
     49	000376	   130 	   117 	   106 	cm1.19:	.asciz	"XOFF/XON   "
     50	000412	   122 	   124 	   123 	cm1.20:	.asciz	"RTS/CTS    "
     51	000426	   123 	   057 	   127 	cm1.21:	.asciz	"S/W Parity: "
     52	000443	   154 	   157 	   167 	li.lo:	.asciz	"low"
     53	000447	   110 	   111 	   107 	li.hi:	.asciz	"HIGH"
     54	000454	   056 	   103 	   117 	takdef::.asciz	".COM"			; default take file extent, patchable
     55	000461	   056 	   114 	   123 	typdef:	.asciz	".LST"			; default extent for type
     56						.even
     57
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 7
Local data		; /63/ consolidated here..

      1
      2	000000					.psect	$code
      3						.sbttl	The SET command		; /BBS/ just about all new..
      4
      5	000000				c$set::	upone	argbuf			; upper case just next arg
	000000	016700 	000000G			mov	argbuf	,r0
	000004	004767 	000000G			call	upone			; /BBS/ upcase only to next delimiter
      6	000010	004767 	000000G			call	loaset			; load the set commands overlay
      7	000014					calls	getcm0	,<argbuf,r0>	; lookup address of desired command
	000014	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	000016	010046 				        mov	r0	,-(sp)	; push it
	000020	016746 	000000G			        mov	argbuf	,-(sp)	; push it
	000024	010605 				  mov	sp	,r5		; set up the argument list pointer
	000026	004767 	000000G			  jsr	pc	,getcm0		; and go to the routine
	000032	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	000034	012605 				  mov	(sp)+	,r5		; /63/ restore r5
      8	000036	010002 				mov	r0	,r2		; save a copy of it
      9	000040	100505 				bmi	60$			; some sort of error occurred
     10	000042	005767 	000000G			tst	wasnul			; were commands listed via "?"
     11	000046	001137 				bne	110$			; ya
     12	000050	004767 	000000G			call	loaset			; reload set commands overlay
     13	000054					calls	getcm1	,<argbuf,r0,r2>	; check possible argument to command
	000054	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	000056	010246 				        mov	r2	,-(sp)	; push it
	000060	010046 				        mov	r0	,-(sp)	; push it
	000062	016746 	000000G			        mov	argbuf	,-(sp)	; push it
	000066	010605 				  mov	sp	,r5		; set up the argument list pointer
	000070	004767 	000000G			  jsr	pc	,getcm1		; and go to the routine
	000074	062706 	000006 			  .iif gt <$$-2>  add	#$$*2	,sp	; gen "add 2*argnum ,sp"
	000100	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     14	000102	005700 				tst	r0			; well?
     15	000104	100463 				bmi	60$			; bad arg..
     16
     17	000106				10$:	scan	#comma	,argbuf		; look for a comma indicating
	000106	016746 	000000G			mov	argbuf	,-(sp)
	000112	005046 				clr	-(sp)
	000114	152716 	000054 			bisb	#comma	,@sp
	000120	004767 	000000G			call	scanch
     18	000124	010067 	000000G			mov	r0	,restof		; stash pointer to remaining arg(s)
     19	000130	001410 				beq	20$			; no comma found
     20	000132	066767 	000000G	000000G		add	argbuf	,restof		; convert offset to address
     21	000140	016700 	000000G			mov	restof	,r0		; get pointer to put a null..
     22	000144	105040 				clrb	-(r0)			; ..where the comma was
     23	000146	010167 	000000G			mov	r1	,lastcmd	; save to dispatch when looping back
     24
     25	000152	004711 			20$:	jsr	pc	,@r1		; dispatch to command starting address
     26	000154	005700 				tst	r0			; did that succeed?
     27	000156	001021 				bne	40$			; nope..
     28	000160	016700 	000000G			mov	restof	,r0		; ya, any more arguments to process?
     29	000164	001470 				beq	110$			; nope..  note r0 is clear here too
     30	000166	122027 	000040 		30$:	cmpb	(r0)+	,#space		; is first byte a blank?
     31	000172	001775 				beq	30$			; ya, skip past it
     32	000174	005300 				dec	r0			; back up to first non-blank char
     33	000176					copyz	r0  ,argbuf  ,#ln$max	; restore remaining as yet unused args
	000176	012746 	000204 			mov	#ln$max	,-(sp)
	000202	010046 				mov	r0	,-(sp)
	000204	016746 	000000G			mov	argbuf	,-(sp)
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 7-1
The SET command		; /BBS/ just about all new..

	000210	004767 	000000G			call	copyz$
     34	000214	016701 	000000G			mov	lastcmd	,r1		; recover dispatch address pointer
     35	000220	000732 				br	10$			; loop back for more
     36
     37	000222	020027 	000000G		40$:	cmp	r0	,#cmd$un	; /62/ which kind of error occurred?
     38	000226	002436 				blt	80$			; it's not a cmd$.. error
     39	000230	003003 				bgt	50$			; not ambiguous either
     40	000232	012700 	000000G			mov	#er$aop	,r0		; it was an ambiguous option or value
     41	000236	000432 				br	80$
     42	000240	020027 	000000G		50$:	cmp	r0	,#cmd$bad	; bad option or value?
     43	000244	001003 				bne	60$			; no, it's some other cmd$.. error
     44	000246	012700 	000000G			mov	#er$bad	,r0		; ya, say so
     45	000252	000424 				br	80$
     46
     47	000254	020027 	000000G		60$:	cmp	r0	,#cmd$ab	; ^C typed?
     48	000260	001430 				beq	100$			; /62/ ya
     49	000262	020027 	000000G			cmp	r0	,#cmd$nx	; /62/ ^Z but keep program running?
     50	000266	001425 				beq	100$			; /62/ ya
     51	000270	020027 	000000G			cmp	r0	,#cmd$ex	; a real ^Z?
     52	000274	001422 				beq	100$			; /62/ ya
     53	000276	020027 	000000G			cmp	r0	,#cmd$un	; ambiguous?
     54	000302	001003 				bne	70$			; nope
     55	000304	012700 	000000G			mov	#er$sam	,r0		; ya, make it an ambiguous SET command
     56	000310	000411 				br	90$
     57	000312	020027 	000000G		70$:	cmp	r0	,#cmd$bad	; bad command?
     58	000316	001002 				bne	80$			; no
     59	000320	012700 	000000G			mov	#er$sun	,r0		; it's an unrecognizable SET command
     60
     61	000324				80$:
     62	000324	004767 	000072 			call	isitcl			; check for possible SET CLn
     63	000330	005700 				tst	r0			; was that it?
     64	000332	001405 				beq	110$			; ya
     65	000334				90$:	direrr	r0			; no.. _ALL_ KRTST0/1 errors come here
	000334	010046 				mov	r0	,-(sp)
	000336	004767 	000000G			call	direr$
     66	000342	004767 	000000G		100$:	call	incsts			; set the global error flag
     67	000346	000207 			110$:	return
     68
     69	000350	005767 	000000G		skipit::tst	restof			; was a comma in the arg string?
     70	000354	001421 				beq	120$			; no
     71	000356					strlen	argbuf			; ya, get length of part-one
	000356	016700 	000000G			mov	argbuf	,r0
	000362	004767 	000000G			call	l$len
     72	000366	066700 	000000G			add	argbuf	,r0		; point to its end
     73	000372	112720 	000054 			movb	#comma	,(r0)+		; stuff the comma back in !!
     74	000376					copyz	restof	,r0  ,#ln$max	; add in rest of original line and
	000376	012746 	000204 			mov	#ln$max	,-(sp)
	000402	016746 	000000G			mov	restof	,-(sp)
	000406	010046 				mov	r0	,-(sp)
	000410	004767 	000000G			call	copyz$
     75	000414	005067 	000000G			clr	restof			; indicate it has been used here
     76	000420	000207 			120$:	return
     77
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 8
The SET command		; /BBS/ just about all new..

      1
      2						.sbttl	SET CLn LINE x		; /BBS/ this is all new..
      3
      4					;	input:	entire command argbuf, .asciz
      5
      6	000422	010004 			isitcl:	mov	r0	,r4		; save incoming error
      7	000424	020027 	000000G			cmp	r0	,#er$pri	; error from SET CL PRIORITY?
      8	000430	001473 				beq	60$			; /BBS/ ya, bail out
      9	000432					upcase	argbuf			; make sure the whole buffer is ok
	000432	016700 	000000G			mov	argbuf	,r0
	000436	004767 	000000G			call	upcase			; /BBS/ upcase until null terminator
     10
     11	000442				10$:	scan	#'=	,argbuf		; /62/ look for an equals sign
	000442	016746 	000000G			mov	argbuf	,-(sp)
	000446	005046 				clr	-(sp)
	000450	152716 	000075 			bisb	#'=	,@sp
	000454	004767 	000000G			call	scanch
     12	000460	005700 				tst	r0			; /62/ well?
     13	000462	001405 				beq	20$			; /62/ not there
     14	000464	066700 	000000G			add	argbuf	,r0		; /62/ found one, get pointer
     15	000470	112740 	000040 			movb	#space	,-(r0)		; /62/ and swap in a space for it
     16	000474	000762 				br	10$			; /62/ check for another "="
     17
     18	000476	016702 	000000G		20$:	mov	argbuf	,r2		; pointer to CLn:
     19	000502	001446 				beq	60$			; not there..
     20	000504	122722 	000103 			cmpb	#'C	,(r2)+		; is first byte a "C" ?
     21	000510	001043 				bne	60$			; nope..
     22	000512	122722 	000114 			cmpb	#'L	,(r2)+		; is second byte an "L" ?
     23	000516	001040 				bne	60$			; nope..
     24
     25	000520	121227 	000072 			cmpb	(r2)	,#':		; is there a colon after CL?
     26	000524	001412 				beq	30$			; ya
     27	000526	121227 	000040 			cmpb	(r2)	,#space		; is there a space delimiter?
     28	000532	001407 				beq	30$			; ya
     29
     30	000534	112200 				movb	(r2)+	,r0		; get unit #, sign bit should be zero
     31	000536	162700 	000070 			sub	#'7+1	,r0		; check unit is 0 - 7 only, and..
     32	000542	062700 	000010 			add	#7+1	,r0		; ..turn ascii into integer
     33	000546	103402 				bcs	40$			; good number crosses 0
     34	000550	000423 				br	60$			; bad number, bail out
     35
     36	000552	005000 			30$:	clr	r0			; set CL unit number to 0
     37	000554	010067 	000000G		40$:	mov	r0	,cl.unit	; save CL unit number
     38
     39	000560	012767 	012276 	000000G		mov	#^rCL0	,cl.r50		; rad50 name of "base" CL device
     40	000566	060067 	000000G			add	r0	,cl.r50		; make it the device at hand..
     41
     42	000572	062700 	000060 			add	#'0	,r0		; now bump it up into an ascii digit
     43	000576	110067 	000134'			movb	r0	,cl.nam+2	; and stick that into "CLn:"
     44
     45	000602	121227 	000072 			cmpb	(r2)	,#':		; is there a colon after CLn ?
     46	000606	001001 				bne	50$			; no
     47	000610	005202 				inc	r2			; ya, bump past it..
     48	000612	122227 	000040 		50$:	cmpb	(r2)+	,#space		; is there a space delimiter?
     49	000616	001402 				beq	70$			; ya
     50
     51	000620	010400 			60$:	mov	r4	,r0		; no, revert to incoming err
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 8-1
SET CLn LINE x		; /BBS/ this is all new..

     52	000622	000434 				br	100$
     53
     54	000624	122227 	000114 		70$:	cmpb	(r2)+	,#'L		; must be an "L"
     55	000630	001027 				bne	90$			; nope..
     56	000632	121227 	000111 			cmpb	(r2)	,#'I		; /62/ is this an "I" ?
     57	000636	001011 				bne	80$			; /62/ no
     58	000640	005202 				inc	r2			; /62/ ya, bump to next char
     59	000642	121227 	000116 			cmpb	(r2)	,#'N		; /62/ an "N" ?
     60	000646	001005 				bne	80$			; /62/ no
     61	000650	005202 				inc	r2			; /62/ ya, bump to next char
     62	000652	121227 	000105 			cmpb	(r2)	,#'E		; /62/ an "E" ?
     63	000656	001001 				bne	80$			; /62/ no
     64	000660	005202 				inc	r2			; /62/ ya, bump to next char
     65	000662	122227 	000040 		80$:	cmpb	(r2)+	,#space		; /62/ a space?
     66	000666	001010 				bne	90$			; /62/ no, command is no good
     67	000670	105712 				tstb	@r2			; anything left?
     68	000672	001406 				beq	90$			; no, command is no good
     69	000674	005767 	000000G			tst	tsxsave			; running under TSX?
     70	000700	001007 				bne	110$			; ya
     71	000702	012700 	000000G			mov	#er$tsx	,r0		; no, load appropriate error
     72	000706	000402 				br	100$			; exit
     73
     74	000710	012700 	000000G		90$:	mov	#er$bad	,r0		; "bad option or value"
     75	000714	000167 	000364 		100$:	jmp	260$			; goto the end, currently just return
     76
     77	000720	121227 	000052 		110$:	cmpb	(r2)	,#'*		; auto-assign?
     78	000724	001002 				bne	120$			; no
     79	000726	000167 	000354 			jmp	cl.wild			; ya
     80
     81	000732	005003 			120$:	clr	r3			; init a reg to hold line number
     82	000734	112200 			130$:	movb	(r2)+	,r0		; next char
     83	000736	162700 	000072 			sub	#'9+1	,r0		; convert decimal ascii to integer
     84	000742	062700 	000012 			add	#9.+1	,r0		; whilst ensuring it's a valid digit
     85	000746	103004 				bcc	140$			; not a number, thus at end of digits
     86	000750	070327 	000012 			mul	#10.	,r3		; bump accumulator by 10s
     87	000754	060003 				add	r0	,r3		; add current digit to the answer
     88	000756	000766 				br	130$			; try for another numeric byte
     89
     90	000760	005067 	000002'		140$:	clr	itsmine			; init already allocated device flag
     91	000764	005703 				tst	r3			; assign or deassign?
     92	000766	001025 				bne	160$			; it's an assign
     93	000770	026767 	000000G	000000G		cmp	cl.r50	,r50dev		; dump it, if program owns it, that is
     94	000776	001407 				beq	150$			; only allow this on current dev
     95	001000	016700 	000000G			mov	cl.r50	,r0		; if .ne.
     96	001004	162700 	000036 			sub	#36	,r0		; try making possible "0" unit a space
     97	001010	020067 	000000G			cmp	r0	,r50dev		; and check it again
     98	001014	001106 				bne	220$			; /63/ not the same
     99	001016	016700 	000000G		150$:	mov	argbuf	,r0		; copy pointer
    100	001022	112720 	000124 			movb	#'T&137	,(r0)+		; load argument to
    101	001026	112720 	000124 			movb	#'T&137	,(r0)+		; drop the CL
    102	001032	105010 				clrb	(r0)			; assign via
    103	001034	004767 	000000G			call	set$line		; "SET LINE TT"
    104	001040	000467 				br	200$			; no error possible here
    105
    106	001042	005767 	000000G		160$:	tst	r50dev			; is a link now in use?
    107	001046	001066 				bne	210$			; ya
    108	001050	012701 	000000G			mov	#alloerr,r1		; no, preser error allocate mapping
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 8-2
SET CLn LINE x		; /BBS/ this is all new..

    109	001054	112767 	000002 	000000G		movb	#2	,d.allo		; prep to
    110	001062	012700 	000000G			mov	#d.allo	,r0		; check device
    111	001066	104375 				emt	375			; for activity
    112	001070	103474 				bcs	240$			; someone else has it
    113	001072	005700 				tst	r0			; or, perhaps you do on another line
    114	001074	001410 				beq	180$			; nope..
    115	001076	020067 	000000G			cmp	r0	,tsxsav		; check against current job # too
    116	001102	001403 				beq	170$			; ok  (same line #)
    117	001104	012700 	000000G			mov	#er$137	,r0		; not ok, in use by you on another job
    118	001110	000475 				br	260$			; bail out
    119
    120	001112	010667 	000002'		170$:	mov	sp	,itsmine	; allocate, except if already owned..
    121	001116	012701 	000000G		180$:	mov	#atterr	,r1		; "attach" error mapping
    122	001122	010367 	000000G			mov	r3	,cl.line	; save the desired line number
    123	001126	012700 	000000G			mov	#attcl	,r0		; try to
    124	001132	104375 				emt	375			; attach it
    125	001134	103452 				bcs	240$			; didn't work
    126	001136	010667 	000000G			mov	sp	,z.atch		; ok, flag it was done from this pgm
    127	001142	005767 	000002'			tst	itsmine			; need to allocate the device?
    128	001146	001010 				bne	190$			; no, you already have it
    129	001150	012701 	000000G			mov	#alloerr,r1		; error mapping for allocate
    130	001154	105067 	000000G			clrb	d.allo			; make it ALLOCATE
    131	001160	012700 	000000G			mov	#d.allo	,r0		; try to
    132	001164	104375 				emt	375			; allocate the device
    133	001166	103424 				bcs	230$			; didn't work
    134
    135	001170				190$:	strcpy	argbuf	,#cl.nam	; /62/ give SET LINE CL unit's name
	001170	012746 	000132'			mov	#cl.nam	,-(sp)
	001174	016746 	000000G			mov	argbuf	,-(sp)
	001200	004767 	000000G			jsr	pc	,strcpy
    136	001204	004767 	000000G			call	set$line		; same as "Kermit-11>SET LINE CLn"
    137	001210	103003 				bcc	200$			; it worked
    138	001212	004767 	000000G			call	cl.dump			; didn't work, clean up..
    139	001216	000432 				br	260$			; exit with error in r0
    140
    141	001220	005000 			200$:	clr	r0			; success
    142	001222	000430 				br	260$
    143	001224	012700 	000000G		210$:	mov	#er$140	,r0		; must drop current assign first
    144	001230	000425 				br	260$
    145	001232	012700 	000000G		220$:	mov	#er$own	,r0		; CL line not owned by this job
    146	001236	000422 				br	260$
    147	001240	113702 	000052 		230$:	movb	@#errbyt,r2		; ya, save error
    148	001244	005067 	000000G			clr	cl.line			; prep to
    149	001250	012700 	000000G			mov	#attcl	,r0		; dump lingering
    150	001254	104375 				emt	375			; CL to term assign
    151	001256	110237 	000052 			movb	r2	,@#errbyt	; recover error
    152	001262	113700 	000052 		240$:	movb	@#errbyt,r0		; get the error code
    153	001266	100003 				bpl	250$			; normal error
    154	001270	005100 				com	r0			; hard error code
    155	001272	012701 	000000G			mov	#faterr	,r1		; map into the hard errors
    156	001276	006300 			250$:	asl	r0			; word addressing
    157	001300	060001 				add	r0	,r1		; map the error
    158	001302	011100 				mov	(r1)	,r0		; and return its address to caller
    159	001304	000207 			260$:	return
    160
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 9
SET CLn LINE x		; /BBS/ this is all new..

      1
      2						.sbttl	SET CL LINE * processor
      3
      4	001306	005767 	000000G		cl.wild:tst	r50dev			; is there now a link device?
      5	001312	001152 				bne	80$			; ya, it has to go first..
      6	001314	105767 	000000G			tstb	ports			; any ports data supplied?
      7	001320	001552 				beq	90$			; no, can't do this
      8	001322	105767 	000000G			tstb	units			; any CL units specified?
      9	001326	001547 				beq	90$			; no, can't do this
     10	001330	012702 	000000G			mov	#units	,r2		; pointer to string of CL units
     11	001334	000403 				br	20$
     12
     13	001336	122227 	000040 		10$:	cmpb	(r2)+	,#space		; must be a space delimiter
     14	001342	001144 				bne	100$			; wasn't, no specified CL unit is free
     15
     16	001344	112200 			20$:	movb	(r2)+	,r0		; get unit #
     17	001346	162700 	000070 			sub	#'7+1	,r0		; check unit is 0 - 7 only, and..
     18	001352	062700 	000010 			add	#7+1	,r0		; ..turn ascii into integer
     19	001356	103136 				bcc	100$			; not a number
     20	001360	010067 	000000G			mov	r0	,cl.unit	; save CL unit number
     21	001364	012767 	012276 	000000G		mov	#^rCL0	,cl.r50		; rad50 name of "base" CL device
     22	001372	060067 	000000G			add	r0	,cl.r50		; make it the device at hand..
     23	001376	062700 	000060 			add	#'0	,r0		; now bump it up into an ascii digit
     24	001402	110067 	000134'			movb	r0	,cl.nam+2	; and stick that into "CLn:"
     25
     26	001406	005067 	000002'			clr	itsmine			; init already allocated device flag
     27	001412	112767 	000002 	000000G		movb	#2	,d.allo		; prep to
     28	001420	012700 	000000G			mov	#d.allo	,r0		; check device
     29	001424	104375 				emt	375			; for activity
     30	001426	103743 				bcs	10$			; someone else has it
     31	001430	005700 				tst	r0			; or, perhaps you do on another line?
     32	001432	001405 				beq	30$			; nope..
     33	001434	020067 	000000G			cmp	r0	,tsxsav		; check against current job # too
     34	001440	001336 				bne	10$			; it's not this job..
     35	001442	010667 	000002'			mov	sp	,itsmine	; allocate, except if already owned..
     36
     37	001446	012704 	000000G		30$:	mov	#ports	,r4		; pointer to ports data
     38	001452	000405 				br	50$			; skip test for end on first pass thru
     39
     40	001454	105714 			40$:	tstb	(r4)			; anything left?
     41	001456	001501 				beq	110$			; nope..
     42	001460	122427 	000040 			cmpb	(r4)+	,#space		; is this a space delimiter?
     43	001464	001373 				bne	40$			; no, keep looking for one
     44
     45	001466	004767 	000520 		50$:	call	220$			; extract a number to try
     46	001472	005703 				tst	r3			; /62/ check for valid number
     47	001474	001464 				beq	90$			; /62/ line 0 doesn't exist
     48	001476	020327 	000050 			cmp	r3	,#40.		; max possible TSX line number
     49	001502	101061 				bhi	90$			; /62/ bad number
     50	001504	010367 	000000G			mov	r3	,cl.line	; good number, save it for attcl
     51	001510	012700 	000000G			mov	#attcl	,r0		; try to
     52	001514	104375 				emt	375			; attach it
     53	001516	103015 				bcc	60$			; it worked
     54	001520	113700 	000052 			movb	@#errbyt,r0		; it didn't work, find out why
     55	001524	120027 	000003 			cmpb	r0	,#3		; what to do?
     56	001530	003351 				bgt	40$			; something's busy, try next one
     57	001532	001445 				beq	90$			; errbyt=3, bad line
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 9-1
SET CL LINE * processor

     58	001534	120027 	000002 			cmpb	r0	,#2		; is it 1 or 2?
     59	001540	001442 				beq	90$			; errbyt=2, bad unit
     60	001542	012700 	000000G			mov	#er$124	,r0		; terminal privilege is required
     61	001546	000167 	000414 			jmp	180$			; this is a fatal error..
     62
     63	001552	010667 	000000G		60$:	mov	sp	,z.atch		; flag TSX line was attached by Kermit
     64	001556	005767 	000002'			tst	itsmine			; need to allocate the device?
     65	001562	001042 				bne	120$			; no, you already have it
     66	001564	105067 	000000G			clrb	d.allo			; make it ALLOCATE
     67	001570	012700 	000000G			mov	#d.allo	,r0		; try to
     68	001574	104375 				emt	375			; allocate the device
     69	001576	103034 				bcc	120$			; ok
     70	001600	113700 	000052 			movb	@#errbyt,r0		; it didn't work, find out why
     71	001604	120027 	000002 			cmpb	r0	,#2		; what to do?
     72	001610	002721 				blt	40$			; device in use, try next one
     73	001612	001415 				beq	90$			; errbyt=2, bad device
     74	001614	120027 	000004 			cmpb	r0	,#4		; is it 3, 4 or 5?
     75	001620	001715 				beq	40$			; errbyt=4, in use by another job
     76	001622	003003 				bgt	70$			; needs allocate privilege
     77	001624	012700 	000000G			mov	#er$122	,r0		; TSX allocation table is full
     78	001630	000556 				br	180$			; which is a fatal error..
     79
     80	001632	012700 	000000G		70$:	mov	#er$123	,r0		; allocate privilege is required
     81	001636	000553 				br	180$			; fatal error..
     82	001640	012700 	000000G		80$:	mov	#er$140	,r0		; must drop current assign first
     83	001644	000550 				br	180$
     84	001646	012700 	000000G		90$:	mov	#er$141	,r0		; bad ports and/or units
     85	001652	000545 				br	180$
     86	001654	012700 	000000G		100$:	mov	#er$142	,r0		; no specified CL unit is free
     87	001660	000542 				br	180$
     88	001662	012700 	000000G		110$:	mov	#er$143	,r0		; no specified TSX line is free
     89	001666	000537 				br	180$
     90
     91	001670				120$:	strcpy	argbuf	,#cl.nam	; /62/ give SET LINE CL unit's name
	001670	012746 	000132'			mov	#cl.nam	,-(sp)
	001674	016746 	000000G			mov	argbuf	,-(sp)
	001700	004767 	000000G			jsr	pc	,strcpy
     92	001704	016746 	000000G			mov	infomsg	,-(sp)		; save current state of SET TT [NO]QU
     93	001710	005067 	000000G			clr	infomsg			; suppress implicit sho$line in set$li
     94	001714	004767 	000000G			call	set$line		; same as "Kermit-11>SET LINE CLn"
     95	001720	012667 	000000G			mov	(sp)+	,infomsg	; restore SET TT [NO]QUIET state
     96	001724	103003 				bcc	130$			; the set$line worked
     97	001726	004767 	000000G			call	cl.dump			; it didn't work, clean up..
     98	001732	000515 				br	180$
     99
    100	001734	105714 			130$:	tstb	(r4)			; anything left in "PORTS" buffer?
    101	001736	001516 				beq	190$			; no, done
    102	001740	121427 	000040 			cmpb	(r4)	,#space		; is next byte a space?
    103	001744	001513 				beq	190$			; ya, thus no parameters given..
    104	001746	122427 	000057 			cmpb	(r4)+	,#'/		; is next byte a slash?
    105	001752	001100 				bne	160$			; no, it's an error
    106	001754	004767 	000232 			call	220$			; extract a speed value
    107	001760					calls	setspd	,<r3>		; give it a try
	001760	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	001762	010346 				  mov	r3	,-(sp)		; doing it thusly generates less code
	001764	010605 				  mov	sp	,r5		; set pointer to argument list
	001766	004767 	000000G			  jsr	pc	,setspd		; call the subroutine
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 9-2
SET CL LINE * processor

	001772	005726 				  tst	(sp)+			; pop parameter list from stack
	001774	012605 				  mov	(sp)+	,r5		; /63/ restore r5
    108	001776	005700 				tst	r0			; well?
    109	002000	001070 				bne	170$			; it failed
    110	002002	005067 	000000G			clr	b4speed			; reset this if above succeeds..
    111	002006	121427 	000040 			cmpb	(r4)	,#space		; anything left in "PORTS" buffer?
    112	002012	003470 				ble	190$			; no
    113	002014	122427 	000057 			cmpb	(r4)+	,#'/		; is next byte a slash?
    114	002020	001055 				bne	160$			; no, it's an error
    115	002022	105067 	000000G			clrb	spare0			; /63/ init xmode buffer just in case
    116	002026	016700 	000000G			mov	argbuf	,r0		; /63/ save modem name here
    117	002032	004767 	000206 			call	250$			; copy modem name into spare buff
    118	002036	121427 	000040 			cmpb	(r4)	,#space		; anything left in "PORTS" buffer?
    119	002042	003407 				ble	140$			; no, try what was there
    120	002044	122427 	000057 			cmpb	(r4)+	,#'/		; is next byte a slash?
    121	002050	001041 				bne	160$			; no, it's an error
    122	002052	012700 	000000G			mov	#spare0	,r0		; /63/ pointer for 250$
    123	002056	004767 	000162 			call	250$			; copy xmode into a handy spare buffer
    124
    125	002062	016746 	000000G		140$:	mov	infomsg	,-(sp)		; save status of SET TT [NO]QUIET
    126	002066	005067 	000000G			clr	infomsg			; suppress display
    127	002072	004767 	000000G			call	set$modem		; try to SET to supplied string
    128	002076	012667 	000000G			mov	(sp)+	,infomsg	; restore SET TT [NO]QUIET
    129	002102	005700 				tst	r0			; did set$modem work?
    130	002104	001020 				bne	150$			; /63/ no
    131	002106	105767 	000000G			tstb	spare0			; /63/ was an xmode value saved?
    132	002112	001430 				beq	190$			; /63/ no, done
    133	002114					strcpy	argbuf	,#spare0	; /63/ put xmode where sph$xm needs it
	002114	012746 	000000G			mov	#spare0	,-(sp)
	002120	016746 	000000G			mov	argbuf	,-(sp)
	002124	004767 	000000G			jsr	pc	,strcpy
    134	002130	004767 	000000G			call	sph$xm			; /63/ try to SET PHONE XMODE..
    135	002134	005700 				tst	r0			; did it work?
    136	002136	001416 				beq	190$			; /63/ ys
    137	002140	012700 	000000G			mov	#er$147	,r0		; SET PHONE XMODE failed
    138	002144	000410 				br	180$
    139
    140	002146	012700 	000000G		150$:	mov	#er$146	,r0		; no, bad ports string
    141	002152	000405 				br	180$
    142	002154	012700 	000000G		160$:	mov	#er$144	,r0		; bad delimiter before speed or modem
    143	002160	000402 				br	180$
    144	002162	012700 	000000G		170$:	mov	#er$145	,r0		; SET SPEED failed, bad ports string
    145	002166	004767 	000000G		180$:	call	incsts			; set the global error flag
    146	002172	000406 				br	210$
    147	002174	005767 	000000G		190$:	tst	infomsg			; time to say what's up?
    148	002200	001402 				beq	200$			; no
    149	002202	004767 	002040 			call	sho$line		; ya, display what was just done
    150	002206	005000 			200$:	clr	r0			; flag success
    151	002210	000207 			210$:	return
    152
    153	002212	005003 			220$:	clr	r3			; init an accumulator for the integer
    154	002214	112400 			230$:	movb	(r4)+	,r0		; next char
    155	002216	162700 	000072 			sub	#'9+1	,r0		; convert ascii byte to integer value
    156	002222	062700 	000012 			add	#9.+1	,r0		; but use it only if a 0..9 digit
    157	002226	103004 				bcc	240$			; not a number
    158	002230	070327 	000012 			mul	#10.	,r3		; bump previous integer by 10s
    159	002234	060003 				add	r0	,r3		; then add in the current value
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 9-3
SET CL LINE * processor

    160	002236	000766 				br	230$			; is next byte part of number?
    161	002240	105744 			240$:	tstb	-(r4)			; park on first non-numeric byte
    162	002242	000207 				return
    163
    164	002244	121427 	000040 		250$:	cmpb	(r4)	,#space		; is next byte a space or less?
    165	002250	101405 				blos	260$			; /63/ ya, time to see if it will SET
    166	002252	121427 	000057 			cmpb	(r4)	,#'/		; no, but is it a slash?
    167	002256	001402 				beq	260$			; ya, try to SET..
    168	002260	112420 				movb	(r4)+	,(r0)+		; no, it's part of the modem name
    169	002262	000770 				br	250$			; check the next byte
    170	002264	105010 			260$:	clrb	(r0)			; terminate
    171	002266	000207 				return
    172
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 10
SET CL LINE * processor

      1
      2						.sbttl	The CONNECT command	; /BBS/ heavily modified
      3
      4	002270	105767 	000000G		c$conn::tstb	ttname			; anything to connect ??
      5	002274	001003 				bne	10$			; ya
      6	002276	012700 	000000G			mov	#er$tt	,r0		; /62/ can't connect TT to TT
      7	002302	000415 				br	20$
      8
      9	002304	016746 	000000G		10$:	mov	mready	,-(sp)		; save modem's init status
     10	002310	004767 	000000G			call	doconn			; run the terminal emulator
     11	002314	005726 				tst	(sp)+			; was modem ever initialized?
     12	002316	001417 				beq	40$			; no
     13	002320	005767 	000000G			tst	mready			; ya, still initialized?
     14	002324	001014 				bne	40$			; ya
     15	002326	004767 	000000G			call	reinit			; no, go re-init it
     16	002332	005700 				tst	r0			; /62/ did it work?
     17	002334	001406 				beq	30$			; /62/ ya
     18	002336				20$:	direrr	r0			; /62/ dump error message
	002336	010046 				mov	r0	,-(sp)
	002340	004767 	000000G			call	direr$
     19	002344	004767 	000000G			call	incsts			; /62/ flag error so r0 can be cleared
     20	002350	000402 				br	40$
     21	002352				30$:	.newline			; ensure prompt comes up in the clear
	002352	004767 	000000G			call	l$pcrlf
     22	002356	005000 			40$:	clr	r0			; /62/ only do error message once
     23	002360	000207 				return
     24
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 11
The CONNECT command	; /BBS/ heavily modified

      1
      2						.sbttl	The TAKE command	; /BBS/ heavily hacked ..
      3
      4	002362	005767 	000000G		c$take::tst	cmdlun			; indirect file already open?
      5	002366	001433 				beq	30$			; no
      6	002370	005767 	000000G			tst	sy.ini			; here during init from KRT.INI?
      7	002374	001403 				beq	10$			; no
      8	002376	004767 	001570 			call	defterm			; ya, do end of init file stuff
      9	002402	000413 				br	20$			; continue
     10
     11	002404	005767 	000000G		10$:	tst	infomsg			; /41/ how verbose are we today?
     12	002410	001410 				beq	20$			; Not very
     13	002412					wrtall	#indnam			; dump file name
	002412	012746 	000000G			mov	#indnam	,-(sp)		; pass the address
	002416	004767 	000000G			call	wrtall			; do it
     14	002422					wrtall	#cm1.01			; /63/ " closed",cr
	002422	012746 	000043'			mov	#cm1.01	,-(sp)		; pass the address
	002426	004767 	000000G			call	wrtall			; do it
     15	002432				20$:	calls	close	,<#lun.ta>	; close the file
	002432	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	002434	012746 	000000G			  mov	#lun.ta	,-(sp)		; doing it thusly generates less code
	002440	010605 				  mov	sp	,r5		; set pointer to argument list
	002442	004767 	000000G			  jsr	pc	,close		; call the subroutine
	002446	005726 				  tst	(sp)+			; pop parameter list from stack
	002450	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     16	002452	005067 	000000G			clr	cmdlun			; clear the it's open flag for it
     17
     18	002456	005004 			30$:	clr	r4			; init try the path flag
     19	002460					upcase	argbuf			; upper case all args
	002460	016700 	000000G			mov	argbuf	,r0
	002464	004767 	000000G			call	upcase			; /BBS/ upcase until null terminator
     20	002470					scan	#'.	,argbuf		; look for a dot in the name
	002470	016746 	000000G			mov	argbuf	,-(sp)
	002474	005046 				clr	-(sp)
	002476	152716 	000056 			bisb	#'.	,@sp
	002502	004767 	000000G			call	scanch
     21	002506	005700 				tst	r0			; find one?
     22	002510	001006 				bne	40$			; ya..
     23	002512					strcat	argbuf	,#takdef	; no, add .COM to it
	002512	012746 	000454'			mov	#takdef	,-(sp)
	002516	016746 	000000G			mov	argbuf	,-(sp)
	002522	004767 	000000G			jsr	pc	,strcat
     24
     25	002526				40$:	scan	#':	,argbuf		; look for device delimiter
	002526	016746 	000000G			mov	argbuf	,-(sp)
	002532	005046 				clr	-(sp)
	002534	152716 	000072 			bisb	#':	,@sp
	002540	004767 	000000G			call	scanch
     26	002544	005700 				tst	r0			; find one?
     27	002546	001411 				beq	50$			; no
     28	002550					copyz	argbuf	,#indnam,#16+1	; /62/ ya, try this file name
	002550	012746 	000017 			mov	#16+1	,-(sp)
	002554	016746 	000000G			mov	argbuf	,-(sp)
	002560	012746 	000000G			mov	#indnam	,-(sp)
	002564	004767 	000000G			call	copyz$
     29	002570	000433 				br	100$
     30
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 11-1
The TAKE command	; /BBS/ heavily hacked ..

     31	002572	012703 	000016'		50$:	mov	#tk.1	,r3		; prep to build a list
     32	002576	010604 				mov	sp	,r4		; flag to try the path
     33	002600	005713 			60$:	tst	@r3			; any more to open up?
     34	002602	001410 				beq	70$			; no
     35	002604					copyz	argbuf	,(r3)+	,#11.	; insert name in path stuff
	002604	012746 	000013 			mov	#11.	,-(sp)
	002610	016746 	000000G			mov	argbuf	,-(sp)
	002614	012346 				mov	(r3)+	,-(sp)
	002616	004767 	000000G			call	copyz$
     36	002622	000766 				br	60$			; try for a possible next one..
     37
     38	002624	012703 	000004'		70$:	mov	#tk.0	,r3		; the top of the list of stuff to try
     39	002630	005713 			80$:	tst	@r3			; anything left?
     40	002632	001003 				bne	90$			; ya
     41	002634	012700 	000000G			mov	#er$fnf	,r0		; no, can't find it
     42	002640	000507 				br	140$			; bail out
     43
     44	002642				90$:	copyz	(r3)+	,#indnam,#16+1	; /62/ current name in list to opener
	002642	012746 	000017 			mov	#16+1	,-(sp)
	002646	012346 				mov	(r3)+	,-(sp)
	002650	012746 	000000G			mov	#indnam	,-(sp)
	002654	004767 	000000G			call	copyz$
     45	002660				100$:	calls	fparse	,<#indnam,#srcnam> ; parse the file name please
	002660	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	002662	012746 	000000G			        mov	#srcnam	,-(sp)	; push it
	002666	012746 	000000G			        mov	#indnam	,-(sp)	; push it
	002672	010605 				  mov	sp	,r5		; set up the argument list pointer
	002674	004767 	000000G			  jsr	pc	,fparse		; and go to the routine
	002700	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	002702	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     46	002704	005700 				tst	r0			; did the $parse work?
     47	002706	001064 				bne	140$			; /62/ no
     48	002710					calls	iswild	,<#srcnam>	; wildcarded file spec?
	002710	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	002712	012746 	000000G			  mov	#srcnam	,-(sp)		; doing it thusly generates less code
	002716	010605 				  mov	sp	,r5		; set pointer to argument list
	002720	004767 	000000G			  jsr	pc	,iswild		; call the subroutine
	002724	005726 				  tst	(sp)+			; pop parameter list from stack
	002726	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     49	002730	005700 				tst	r0			; no support for it yet here..
     50	002732	001052 				bne	140$			; /62/ disallow wildcarded file name
     51
     52					;	calls	chkext	,<#srcnam>	; check for binary file type
     53					;	tst	r0			; iz it binary?
     54					;	beq	110$			; nope
     55					;	mov	#er$fnm	,r0		; ya, bad file name
     56					;	br	130$			; bail out
     57
     58	002734				110$:	calls	open,<#srcnam,#lun.ta,#text> ; open file for input
	002734	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	002736	012746 	000000 			        mov	#text	,-(sp)	; push it
	002742	012746 	000000G			        mov	#lun.ta	,-(sp)	; push it
	002746	012746 	000000G			        mov	#srcnam	,-(sp)	; push it
	002752	010605 				  mov	sp	,r5		; set up the argument list pointer
	002754	004767 	000000G			  jsr	pc	,open		; and go to the routine
	002760	062706 	000006 			  .iif gt <$$-2>  add	#$$*2	,sp	; gen "add 2*argnum ,sp"
	002764	012605 				  mov	(sp)+	,r5		; /63/ restore r5
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 11-2
The TAKE command	; /BBS/ heavily hacked ..

     59	002766	005700 				tst	r0			; did the open for command file work?
     60	002770	001031 				bne	130$			; no, print error and exit
     61	002772	012767 	000000G	000000G		mov	#lun.ta	,cmdlun		; yes, stuff the unit number in
     62	003000					copyz	#srcnam	,#indnam ,#16+1	; /62/ stash a copy of the file name
	003000	012746 	000017 			mov	#16+1	,-(sp)
	003004	012746 	000000G			mov	#srcnam	,-(sp)
	003010	012746 	000000G			mov	#indnam	,-(sp)
	003014	004767 	000000G			call	copyz$
     63	003020	005767 	000000G			tst	infomsg			; status of SET TT [NO]QUIET
     64	003024	001410 				beq	120$			; it's QUIET
     65	003026					wrtall	#indnam			; it's NOQUIET, display file name
	003026	012746 	000000G			mov	#indnam	,-(sp)		; pass the address
	003032	004767 	000000G			call	wrtall			; do it
     66	003036					wrtall	#cm1.02			; /63/ " opened",cr  r0 remains 0 here
	003036	012746 	000055'			mov	#cm1.02	,-(sp)		; pass the address
	003042	004767 	000000G			call	wrtall			; do it
     67	003046	005067 	000000G		120$:	clr	exstal			; init take file line number pointer
     68	003052	000411 				br	150$			; take file will be read by readcmd..
     69
     70	003054	005704 			130$:	tst	r4			; if using the path list of names
     71	003056	001264 				bne	80$			; be sure they all get tried..
     72	003060				140$:	direrr	r0			; print a error message and
	003060	010046 				mov	r0	,-(sp)
	003062	004767 	000000G			call	direr$
     73	003066	004767 	000000G			call	incsts			; /62/ ensure global error flag is set
     74	003072	105067 	000000G			clrb	indnam			; zero out take file name buffer
     75	003076	000207 			150$:	return
     76
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 12
The TAKE command	; /BBS/ heavily hacked ..

      1
      2						.sbttl	Local DIRECTORY and SPACE commands  ; /BBS/ modified a bit
      3
      4	003100	010667 	000000G		c$spac::mov	sp	,summary	; flag for summary only
      5	003104				c$dir::	upcase	argbuf			; upper case all command args
	003104	016700 	000000G			mov	argbuf	,r0
	003110	004767 	000000G			call	upcase			; /BBS/ upcase until null terminator
      6	003114					calls	fixwild	,<argbuf>	; convert "?" to "%"
	003114	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003116	016746 	000000G			  mov	argbuf	,-(sp)		; doing it thusly generates less code
	003122	010605 				  mov	sp	,r5		; set pointer to argument list
	003124	004767 	000000G			  jsr	pc	,fixwild		; call the subroutine
	003130	005726 				  tst	(sp)+			; pop parameter list from stack
	003132	012605 				  mov	(sp)+	,r5		; /63/ restore r5
      7	003134					calls	dodir	,<argbuf>	; /62/ do the directory
	003134	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003136	016746 	000000G			  mov	argbuf	,-(sp)		; doing it thusly generates less code
	003142	010605 				  mov	sp	,r5		; set pointer to argument list
	003144	004767 	000000G			  jsr	pc	,dodir		; call the subroutine
	003150	005726 				  tst	(sp)+			; pop parameter list from stack
	003152	012605 				  mov	(sp)+	,r5		; /63/ restore r5
      8	003154	005700 				tst	r0			; did it work?
      9	003156	001403 				beq	10$			; yes
     10	003160					direrr	r0			; no, print the error
	003160	010046 				mov	r0	,-(sp)
	003162	004767 	000000G			call	direr$
     11	003166	000207 			10$:	return
     12
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 13
Local DIRECTORY and SPACE commands  ; /BBS/ modified a bit

      1
      2						.sbttl	MOUNT, DISMOUNT a logical disk  (TSX+ only)  ; /BBS/ all new
      3
      4	003170	010601 			c$dismou::mov	sp	,r1		; set dismount flag
      5	003172	000401 				br	c.mnt			; and use common code
      6
      7	003174	005001 			c$mount::clr	r1			; flag to mount
      8	003176	005767 	000000G		c.mnt:	tst	tsxsav			; /63/ running under TSX?
      9	003202	001003 				bne	10$			; ya
     10	003204	012700 	000000G			mov	#er$tsx	,r0		; no, load error
     11	003210	000413 				br	30$			; that's all
     12
     13	003212	026727 	000000G	001154 	10$:	cmp	tsxver	,#620.		; is this V6.20 or above?
     14	003220	103003 				bhis	20$			; ya
     15	003222	012700 	000000G			mov	#er$v62	,r0		; no
     16	003226	000404 				br	30$
     17
     18	003230	004767 	000000G		20$:	call	mount			; do the mount now
     19	003234	005700 				tst	r0			; did it work?
     20	003236	001403 				beq	40$			; yes
     21	003240				30$:	direrr	r0			; no, print error message
	003240	010046 				mov	r0	,-(sp)
	003242	004767 	000000G			call	direr$
     22	003246	000207 			40$:	return
     23
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 14
MOUNT, DISMOUNT a logical disk  (TSX+ only)  ; /BBS/ all new

      1
      2						.sbttl	The local TYPE command	; /BBS/ heavily hacked..
      3
      4						.save
      5	000466					.psect	$pdata
      6	000466	   015 	   012 	   000 	less:	.asciz	<cr><lf>		; only type these for a binary file
      7	000471	   007 	   010 	   011 	more:	.asciz	<bell><bs><tab><cr><ff><lf><ctrl$n><ctrl$o><esc> ; ok in text
      8						.even
      9	003250					.restore
     10
     11	003250				c$type::upcase	argbuf			; upper case all args
	003250	016700 	000000G			mov	argbuf	,r0
	003254	004767 	000000G			call	upcase			; /BBS/ upcase until null terminator
     12	003260					calls	fparse	,<argbuf,#srcnam> ; parse the file name please
	003260	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003262	012746 	000000G			        mov	#srcnam	,-(sp)	; push it
	003266	016746 	000000G			        mov	argbuf	,-(sp)	; push it
	003272	010605 				  mov	sp	,r5		; set up the argument list pointer
	003274	004767 	000000G			  jsr	pc	,fparse		; and go to the routine
	003300	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	003302	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     13	003304	005700 				tst	r0			; did the $parse work?
     14	003306	001402 				beq	10$			; ya
     15	003310	000167 	000542 			jmp	170$			; no
     16
     17	003314	005067 	000000G		10$:	clr	index			; init getnxt directory index
     18	003320					scan	#'.	,#srcnam	; look for a dot in the name
	003320	012746 	000000G			mov	#srcnam	,-(sp)
	003324	005046 				clr	-(sp)
	003326	152716 	000056 			bisb	#'.	,@sp
	003332	004767 	000000G			call	scanch
     19	003336	005700 				tst	r0			; find one?
     20	003340	001006 				bne	20$			; ya..
     21	003342					strcat	#srcnam	,#typdef	; no, add ".LST" to it
	003342	012746 	000461'			mov	#typdef	,-(sp)
	003346	012746 	000000G			mov	#srcnam	,-(sp)
	003352	004767 	000000G			jsr	pc	,strcat
     22
     23	003356				20$:	calls	iswild	,<#srcnam>	; wildcarded?
	003356	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003360	012746 	000000G			  mov	#srcnam	,-(sp)		; doing it thusly generates less code
	003364	010605 				  mov	sp	,r5		; set pointer to argument list
	003366	004767 	000000G			  jsr	pc	,iswild		; call the subroutine
	003372	005726 				  tst	(sp)+			; pop parameter list from stack
	003374	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     24	003376	010004 				mov	r0	,r4		; save copy of answer
     25	003400				30$:	calls	lookup	,<#srcnam,#filnam> ; /62/
	003400	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003402	012746 	000000G			        mov	#filnam	,-(sp)	; push it
	003406	012746 	000000G			        mov	#srcnam	,-(sp)	; push it
	003412	010605 				  mov	sp	,r5		; set up the argument list pointer
	003414	004767 	000000G			  jsr	pc	,lookup		; and go to the routine
	003420	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	003422	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     26	003424	005700 				tst	r0			; did it work?
     27	003426	001420 				beq	70$			; yes
     28	003430	005001 				clr	r1			; clear try for another flag..
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 14-1
The local TYPE command	; /BBS/ heavily hacked..

     29	003432	020027 	000000G			cmp	r0	,#er$nmf	; no more files matching name?
     30	003436	001403 				beq	40$			; yes, we are all done then
     31	003440	020027 	000000G			cmp	r0	,#er$fnf	; how about file not found?
     32	003444	001007 				bne	60$			; /62/ no, print error message
     33	003446	005767 	000000G		40$:	tst	index			; sent any files yet?
     34	003452	001402 				beq	50$			; no
     35	003454	000167 	000416 			jmp	190$			; yes, that's ok then
     36	003460	012700 	000000G		50$:	mov	#er$fnf	,r0		; no, change "no more" to "not found"
     37	003464	000167 	000376 		60$:	jmp	180$			; /62/ go do error message
     38
     39	003470	012703 	000471'		70$:	mov	#more	,r3		; init for text file filtering
     40	003474	005001 				clr	r1			; init binary/text flag
     41	003476					calls	chkext	,<#filnam>	; check for binary file type
	003476	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003500	012746 	000000G			  mov	#filnam	,-(sp)		; doing it thusly generates less code
	003504	010605 				  mov	sp	,r5		; set pointer to argument list
	003506	004767 	000000G			  jsr	pc	,chkext		; call the subroutine
	003512	005726 				  tst	(sp)+			; pop parameter list from stack
	003514	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     42	003516	005700 				tst	r0			; iz it binary?
     43	003520	001403 				beq	80$			; no..
     44	003522	012703 	000466'			mov	#less	,r3		; ya, get binary file filter
     45	003526	005201 				inc	r1			; flag as binary
     46	003530	005002 			80$:	clr	r2			; assume file not open
     47	003532					calls	open,<#filnam,#lun.in,r1> ; open file for input
	003532	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003534	010146 				        mov	r1	,-(sp)	; push it
	003536	012746 	000000G			        mov	#lun.in	,-(sp)	; push it
	003542	012746 	000000G			        mov	#filnam	,-(sp)	; push it
	003546	010605 				  mov	sp	,r5		; set up the argument list pointer
	003550	004767 	000000G			  jsr	pc	,open		; and go to the routine
	003554	062706 	000006 			  .iif gt <$$-2>  add	#$$*2	,sp	; gen "add 2*argnum ,sp"
	003560	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     48	003562	005700 				tst	r0			; but did the open work?
     49	003564	001134 				bne	170$			; no
     50	003566	005102 				com	r2			; flag it as being open please
     51	003570	005704 				tst	r4			; wildcarded?
     52	003572	001410 				beq	90$			; nope
     53	003574	026727 	000000G	000001 		cmp	index	,#1		; is this the first file?
     54	003602	001004 				bne	90$			; nope
     55	003604					wrtall	#cm1.03			; /63/ " Files copied:",cr
	003604	012746 	000067'			mov	#cm1.03	,-(sp)		; pass the address
	003610	004767 	000000G			call	wrtall			; do it
     56	003614	005701 			90$:	tst	r1			; iz binary filter active?
     57	003616	001404 				beq	100$			; nope
     58	003620					wrtall	#cm1.04			; /63/ "Binary file filter enabled",cr
	003620	012746 	000110'			mov	#cm1.04	,-(sp)		; pass the address
	003624	004767 	000000G			call	wrtall			; do it
     59	003630	005704 			100$:	tst	r4			; more than one file possibly?
     60	003632	001410 				beq	110$			; no, skip naming of each one
     61	003634					wrtall	#filnam			; print the expanded name out
	003634	012746 	000000G			mov	#filnam	,-(sp)		; pass the address
	003640	004767 	000000G			call	wrtall			; do it
     62	003644					wrtall	#cm1.05			; /63/ " to TT:",cr
	003644	012746 	000155'			mov	#cm1.05	,-(sp)		; pass the address
	003650	004767 	000000G			call	wrtall			; do it
     63	003654				110$:	calls	open,<#0,#lun.kb,r1>	; open (init) TT for putc output
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 14-2
The local TYPE command	; /BBS/ heavily hacked..

	003654	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003656	010146 				        mov	r1	,-(sp)	; push it
	003660	012746 	000000G			        mov	#lun.kb	,-(sp)	; push it
	003664	012746 	000000 			        mov	#0	,-(sp)	; push it
	003670	010605 				  mov	sp	,r5		; set up the argument list pointer
	003672	004767 	000000G			  jsr	pc	,open		; and go to the routine
	003676	062706 	000006 			  .iif gt <$$-2>  add	#$$*2	,sp	; gen "add 2*argnum ,sp"
	003702	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     64
     65	003704	012700 	000000G		120$:	mov	#lun.in	,r0		; I/O chan to use
     66	003710	004767 	000000G			call	getcr0			; get a byte
     67	003714	005700 				tst	r0			; end of it all?
     68	003716	001057 				bne	170$			; ya
     69	003720	026727 	000000G	000003 		cmp	vttype	,#vt200		; can term do 8-bit stuff?
     70	003726	002002 				bge	130$			; ya..
     71	003730	142701 	000200 			bicb	#200	,r1		; /62/ hose hi bit for VT-100 or below
     72	003734	120127 	000040 		130$:	cmpb	r1	,#space		; a "printable" char??
     73	003740	002007 				bge	140$			; ya, no problem..
     74	003742					scan	r1	,r3		; look for char in allowed list
	003742	010346 				mov	r3	,-(sp)
	003744	005046 				clr	-(sp)
	003746	150116 				bisb	r1	,@sp
	003750	004767 	000000G			call	scanch
     75	003754	005700 				tst	r0			; a hit?
     76	003756	001752 				beq	120$			; nope, so on to the next
     77	003760	006267 	000000'		140$:	asr	crflag			; /62/ ya, was last byte a CR?
     78	003764	103015 				bcc	150$			; /62/ no
     79	003766	120127 	000012 			cmpb	r1	,#lf		; /62/ is this byte a LF?
     80	003772	001412 				beq	150$			; /62/ ya
     81	003774					calls	putc	,<#lf,#lun.kb>	; /62/ no, append LF to CR just typed
	003774	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	003776	012746 	000000G			        mov	#lun.kb	,-(sp)	; push it
	004002	012746 	000012 			        mov	#lf	,-(sp)	; push it
	004006	010605 				  mov	sp	,r5		; set up the argument list pointer
	004010	004767 	000000G			  jsr	pc	,putc		; and go to the routine
	004014	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	004016	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     82	004020	120127 	000015 		150$:	cmpb	r1	,#cr		; /62/ is this byte a CR?
     83	004024	001002 				bne	160$			; /62/ no
     84	004026	005267 	000000'			inc	crflag			; /62/ ya, flag it is
     85	004032				160$:	calls	putc	,<r1,#lun.kb>	; put char to TT
	004032	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	004034	012746 	000000G			        mov	#lun.kb	,-(sp)	; push it
	004040	010146 				        mov	r1	,-(sp)	; push it
	004042	010605 				  mov	sp	,r5		; set up the argument list pointer
	004044	004767 	000000G			  jsr	pc	,putc		; and go to the routine
	004050	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	004052	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     86	004054	000713 				br	120$			; next char please
     87
     88	004056	010001 			170$:	mov	r0	,r1		; save copy for wildcard loop
     89	004060	020027 	000000G			cmp	r0	,#er$eof	; end of file?
     90	004064	001404 				beq	190$			; ya
     91	004066				180$:	direrr	r0			; no, print the error out
	004066	010046 				mov	r0	,-(sp)
	004070	004767 	000000G			call	direr$
     92	004074	005001 				clr	r1			; clear look for another flag
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 14-3
The local TYPE command	; /BBS/ heavily hacked..

     93	004076				190$:	calls	close	,<#lun.kb>	; flush TT out buffer
	004076	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	004100	012746 	000000G			  mov	#lun.kb	,-(sp)		; doing it thusly generates less code
	004104	010605 				  mov	sp	,r5		; set pointer to argument list
	004106	004767 	000000G			  jsr	pc	,close		; call the subroutine
	004112	005726 				  tst	(sp)+			; pop parameter list from stack
	004114	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     94	004116	005702 				tst	r2			; is the type file open?
     95	004120	001410 				beq	200$			; no
     96	004122					calls	close	,<#lun.in>	; ya, close it
	004122	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	004124	012746 	000000G			  mov	#lun.in	,-(sp)		; doing it thusly generates less code
	004130	010605 				  mov	sp	,r5		; set pointer to argument list
	004132	004767 	000000G			  jsr	pc	,close		; call the subroutine
	004136	005726 				  tst	(sp)+			; pop parameter list from stack
	004140	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     97	004142	020127 	000000G		200$:	cmp	r1	,#er$eof	; try for another match?
     98	004146	001004 				bne	210$			; nope, done
     99	004150					.newline			; ya, put possible next file in clear
	004150	004767 	000000G			call	l$pcrlf
    100	004154	000167 	177220 			jmp	30$			; then go try to type it out
    101	004160				210$:	.purge	#lun.sr			; /62/ hose dir search channel
	004160	012700 	001400G			MOV	#lun.sr+<3.*^O400>,R0
	004164	104374 				EMT	^O374
    102	004166	005000 				clr	r0			; /62/ any error was already handled
    103	004170	000207 				return
    104
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 15
The local TYPE command	; /BBS/ heavily hacked..

      1
      2						.sbttl	SHOW LINE		; /BBS/ moved here, added defterm
      3
      4	004172	005767 	000000G		defterm::tst	infomsg			; SET TT NOQ during init?
      5	004176	001410 				beq	10$			; no
      6	004200					wrtall	#indnam			; ya, say
	004200	012746 	000000G			mov	#indnam	,-(sp)		; pass the address
	004204	004767 	000000G			call	wrtall			; do it
      7	004210					wrtall	#cm1.01			; /63/ " closed",cr
	004210	012746 	000043'			mov	#cm1.01	,-(sp)		; pass the address
	004214	004767 	000000G			call	wrtall			; do it
      8	004220	005767 	000000G		10$:	tst	signon			; need to do this?
      9	004224	001002 				bne	20$			; no
     10	004226	004767 	000014 			call	sho$line		; ya, SHOW LINE as part of pgm sign-on
     11	004232	016767 	000000G	000000G	20$:	mov	qu.ini	,infomsg	; make the SET permanent
     12	004240	005067 	000000G			clr	sy.ini			; done with this now
     13	004244	000207 				return
     14
     15	004246				sho$li::wrtall	#cm1.06			; /63/ "Link device is "
	004246	012746 	000167'			mov	#cm1.06	,-(sp)		; pass the address
	004252	004767 	000000G			call	wrtall			; do it
     16	004256	105767 	000000G			tstb	ttname			; something besides TT?
     17	004262	001006 				bne	10$			; ya
     18	004264					wrtall	#cm1.07			; /63/ "TT:   "
	004264	012746 	000207'			mov	#cm1.07	,-(sp)		; pass the address
	004270	004767 	000000G			call	wrtall			; do it
     19	004274	000167 	000544 			jmp	170$			; skip speed, DTR, etc for TT
     20
     21	004300				10$:	wrtall	#ttname			; display link device name
	004300	012746 	000000G			mov	#ttname	,-(sp)		; pass the address
	004304	004767 	000000G			call	wrtall			; do it
     22	004310	016700 	000000G			mov	cl$line	,r0		; using a TSX port with it?
     23	004314	001406 				beq	20$			; not this time
     24	004316					wrtall	#cm1.08			; /63/ " via Line #"
	004316	012746 	000216'			mov	#cm1.08	,-(sp)		; pass the address
	004322	004767 	000000G			call	wrtall			; do it
     25	004326	004767 	000000G			call	L10266			; dump line # to TT
     26	004332	005767 	000000G		20$:	tst	tsxsav			; running under TSX?
     27	004336	001410 				beq	30$			; no
     28	004340					wrtall	#cm1.09			; /63/ "   Priority: "
	004340	012746 	000232'			mov	#cm1.09	,-(sp)		; pass the address
	004344	004767 	000000G			call	wrtall			; do it
     29	004350	016700 	000000G			mov	cl.pri	,r0		; pass priority value to L10266
     30	004354	004767 	000000G			call	L10266			; dump priority to TT
     31	004360				30$:	wrtall	#cm1.10			; /63/ "   Speed: "
	004360	012746 	000250'			mov	#cm1.10	,-(sp)		; pass the address
	004364	004767 	000000G			call	wrtall			; do it
     32	004370	004767 	000000G			call	ttspeed			; is current
     33	004374	005700 				tst	r0			; speed available?
     34	004376	001005 				bne	40$			; /62/ yes
     35	004400					wrtall	#cm1.11			; /63/ "N/A"
	004400	012746 	000263'			mov	#cm1.11	,-(sp)		; pass the address
	004404	004767 	000000G			call	wrtall			; do it
     36	004410	000413 				br	50$
     37	004412	004767 	000000G		40$:	call	L10266			; print the speed
     38	004416	016700 	000000G			mov	b4speed	,r0		; did last call alter speed?
     39	004422	001406 				beq	50$			; nope
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 15-1
SHOW LINE		; /BBS/ moved here, added defterm

     40	004424					wrtall	#cm1.12			; /63/ "/"
	004424	012746 	000267'			mov	#cm1.12	,-(sp)		; pass the address
	004430	004767 	000000G			call	wrtall			; do it
     41	004434	004767 	000000G			call	L10266			; display the "SET" speed too
     42
     43	004440				50$:	.newline
	004440	004767 	000000G			call	l$pcrlf
     44	004444	005767 	000000G			tst	mready			; a modem on-line?
     45	004450	001410 				beq	60$			; /62/ no
     46	004452					wrtall	#modem			; ya
	004452	012746 	000000G			mov	#modem	,-(sp)		; pass the address
	004456	004767 	000000G			call	wrtall			; do it
     47	004462					wrtall	#cm1.13			; /63/ " modem is on-line   "
	004462	012746 	000271'			mov	#cm1.13	,-(sp)		; pass the address
	004466	004767 	000000G			call	wrtall			; do it
     48	004472	005767 	000000G		60$:	tst	sy.ini			; here for program initialization?
     49	004476	001162 				bne	170$			; ya, skip past DTR/DCD stuff
     50	004500					wrtall	#cm1.14			; /63/ "DTR: "
	004500	012746 	000316'			mov	#cm1.14	,-(sp)		; pass the address
	004504	004767 	000000G			call	wrtall			; do it
     51	004510	004767 	000000G			call	inqdtr			; see if DTR is up
     52	004514	005700 				tst	r0			; if < it's not supported
     53	004516	100406 				bmi	70$			; no good
     54	004520	003012 				bgt	80$			; DTR's up
     55	004522					wrtall	#li.lo			; /62/ "low"
	004522	012746 	000443'			mov	#li.lo	,-(sp)		; pass the address
	004526	004767 	000000G			call	wrtall			; do it
     56	004532	000411 				br	90$
     57	004534				70$:	wrtall	#cm1.11			; /63/ "N/A"
	004534	012746 	000263'			mov	#cm1.11	,-(sp)		; pass the address
	004540	004767 	000000G			call	wrtall			; do it
     58	004544	000404 				br	90$
     59	004546				80$:	wrtall	#li.hi			; /62/ "HIGH"
	004546	012746 	000447'			mov	#li.hi	,-(sp)		; pass the address
	004552	004767 	000000G			call	wrtall			; do it
     60	004556				90$:	wrtall	#cm1.15			; /63/ "   DCD: "
	004556	012746 	000324'			mov	#cm1.15	,-(sp)		; pass the address
	004562	004767 	000000G			call	wrtall			; do it
     61	004566	004767 	000000G			call	inqcd			; see if DCD is up
     62	004572	005700 				tst	r0			; if > DCD is asserted
     63	004574	003005 				bgt	100$			; it's up
     64	004576					wrtall	#li.lo			; /62/ "low"
	004576	012746 	000443'			mov	#li.lo	,-(sp)		; pass the address
	004602	004767 	000000G			call	wrtall			; do it
     65	004606	000404 				br	110$
     66	004610				100$:	wrtall	#li.hi			; /62/ "HIGH"
	004610	012746 	000447'			mov	#li.hi	,-(sp)		; pass the address
	004614	004767 	000000G			call	wrtall			; do it
     67	004620	005001 			110$:	clr	r1			; /62/ preset to XOFF flow control
     68	004622	005767 	000000G			tst	km.lock			; /62/ only do these next two
     69	004626	001464 				beq	150$			; /62/ for the KM handler
     70	004630	005046 				clr	-(sp)			; /62/ a one word buffer
     71	004632	010601 				mov	sp	,r1		; /62/ pointer to it
     72	004634					.spfun	#rtwork,#xc.control,#clstat,r1,#0,#1 ; get the status
	004634	012700 	000000G			MOV	#rtwork,R0
	004640	012710 	015000G			MOV	#xc.control+<26.*^O400>,@R0
	004644	012760 	000001 	000002 		MOV	#1,2.(R0)
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 15-2
SHOW LINE		; /BBS/ moved here, added defterm

	004652	010160 	000004 			MOV	r1,4.(R0)
	004656	005060 	000006 			CLR	6.(R0)
	004662	012760 	000000C	000010 		MOV	#clstat*^O400+^O377,8.(R0)
	004670	005060 	000012 			CLR	10.(R0)
	004674	104375 				EMT	^O375
     73	004676	012601 				mov	(sp)+	,r1		; /62/ pop buffer, save a copy
     74	004700					wrtall	#cm1.16			; /63/ "   RTS: "
	004700	012746 	000335'			mov	#cm1.16	,-(sp)		; pass the address
	004704	004767 	000000G			call	wrtall			; do it
     75	004710	032701 	000010 			bit	#10	,r1		; /62/ is RTS asserted?
     76	004714	001005 				bne	120$			; /62/ ya
     77	004716					wrtall	#li.lo			; /62/ "low"
	004716	012746 	000443'			mov	#li.lo	,-(sp)		; pass the address
	004722	004767 	000000G			call	wrtall			; do it
     78	004726	000404 				br	130$
     79	004730				120$:	wrtall	#li.hi			; /62/ "HIGH"
	004730	012746 	000447'			mov	#li.hi	,-(sp)		; pass the address
	004734	004767 	000000G			call	wrtall			; do it
     80	004740				130$:	wrtall	#cm1.17			; /63/ "   CTS: "
	004740	012746 	000346'			mov	#cm1.17	,-(sp)		; pass the address
	004744	004767 	000000G			call	wrtall			; do it
     81	004750	032701 	000020 			bit	#20	,r1		; /62/ is CTS asserted?
     82	004754	001005 				bne	140$			; /62/ ya
     83	004756					wrtall	#li.lo			; /62/ "low"
	004756	012746 	000443'			mov	#li.lo	,-(sp)		; pass the address
	004762	004767 	000000G			call	wrtall			; do it
     84	004766	000404 				br	150$
     85	004770				140$:	wrtall	#li.hi			; /62/ "HIGH"
	004770	012746 	000447'			mov	#li.hi	,-(sp)		; pass the address
	004774	004767 	000000G			call	wrtall			; do it
     86
     87	005000				150$:	.newline
	005000	004767 	000000G			call	l$pcrlf
     88	005004					wrtall	#cm1.18			; /63/ "Flow-Control: "
	005004	012746 	000357'			mov	#cm1.18	,-(sp)		; pass the address
	005010	004767 	000000G			call	wrtall			; do it
     89	005014	032701 	000040 			bit	#40	,r1		; /62/ if <> it's done in hardware
     90	005020	001005 				bne	160$
     91	005022					wrtall	#cm1.19			; /63/ "XOFF/XON   "
	005022	012746 	000376'			mov	#cm1.19	,-(sp)		; pass the address
	005026	004767 	000000G			call	wrtall			; do it
     92	005032	000404 				br	170$
     93	005034				160$:	wrtall	#cm1.20			; /63/ RTS/CTS   "
	005034	012746 	000412'			mov	#cm1.20	,-(sp)		; pass the address
	005040	004767 	000000G			call	wrtall			; do it
     94	005044	016700 	000000G		170$:	mov	parity	,r0		; display what's set in Kermit itself
     95	005050					wrtall	#cm1.21			; /63/ "S/W Parity: "
	005050	012746 	000426'			mov	#cm1.21	,-(sp)		; pass the address
	005054	004767 	000000G			call	wrtall			; do it
     96	005060	006300 				asl	r0			; word indexing into list
     97	005062					wrtall	parlst(r0)		; write appropriate word to TT
	005062	016046 	000000'			mov	parlst(r0)	,-(sp)		; pass the address
	005066	004767 	000000G			call	wrtall			; do it
     98	005072					.newline			; format display
	005072	004767 	000000G			call	l$pcrlf
     99	005076	010667 	000000G			mov	sp	,signon		; sign-on has been done
    100	005102	005000 				clr	r0			; no error possible
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 15-3
SHOW LINE		; /BBS/ moved here, added defterm

    101	005104	000207 				return
    102
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 16
SHOW LINE		; /BBS/ moved here, added defterm

      1
      2						.sbttl	Cleanup before exiting to monitor	; /BBS/ enhanced
      3
      4	005106	004767 	000000G		c$exit::call	sd$off			; close possibly open debug file
      5	005112	005767 	000000G			tst	outopn			; is an output file open?
      6	005116	001410 				beq	10$			; no
      7	005120					calls	close	,<#lun.ou>	; ya, close it
	005120	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	005122	012746 	000000G			  mov	#lun.ou	,-(sp)		; doing it thusly generates less code
	005126	010605 				  mov	sp	,r5		; set pointer to argument list
	005130	004767 	000000G			  jsr	pc	,close		; call the subroutine
	005134	005726 				  tst	(sp)+			; pop parameter list from stack
	005136	012605 				  mov	(sp)+	,r5		; /63/ restore r5
      8	005140	016746 	000000G		10$:	mov	mready	,-(sp)		; save modem status
      9	005144	004767 	000000G			call	c$idle			; reset modem, if need be..
     10	005150	005726 				tst	(sp)+			; was there a modem?
     11	005152	001412 				beq	20$			; nope
     12	005154					calls	suspend	,<#0,settle>	; ya, let it settle
	005154	010546 				mov	r5	,-(sp)		; /63/ will be used to point to arg(s)
	005156	016746 	000000G			        mov	settle	,-(sp)	; push it
	005162	012746 	000000 			        mov	#0	,-(sp)	; push it
	005166	010605 				  mov	sp	,r5		; set up the argument list pointer
	005170	004767 	000000G			  jsr	pc	,suspend		; and go to the routine
	005174	022626 				  .iif eq <$$-2>  cmp	(sp)+	,(sp)+	; two args
	005176	012605 				  mov	(sp)+	,r5		; /63/ restore r5
     13	005200	004767 	000000G		20$:	call	xl.dump			; drop DTR, handler interrupts
     14	005204	005767 	000000G			tst	tsxcl			; using a CL line?
     15	005210	001402 				beq	30$			; no
     16	005212	004767 	000000G			call	cl.dump			; dump it
     17	005216	000167 	000000G		30$:	jmp	exit			; goto hardware reset in KRTRMS
     18
     19		000001 				.end
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 16-1
Symbol table

ALLOER= ****** GX	CM1.18  000357R     003	ER$141= ****** GX	L10266= ****** GX	SPACE = 000040
ALSIZE= 002000   	CM1.19  000376R     003	ER$142= ****** GX	MAXLNG= 003600   	SPARE0= ****** GX
ARGBUF= ****** GX	CM1.20  000412R     003	ER$143= ****** GX	MAXPAK  000136   	SPH$XM= ****** GX
ATTCL = ****** GX	CM1.21  000426R     003	ER$144= ****** GX	MODEM = ****** GX	SRCNAM= ****** GX
ATTERR= ****** GX	COMMA = 000054   	ER$145= ****** GX	MORE    000471R     003	STRCAT= ****** GX
AT.ALL  000177   	CON$ES= 000034   	ER$146= ****** GX	MOUNT = ****** GX	STRCPY= ****** GX
AT.CDT  000001   	COPYZ$= ****** GX	ER$147= ****** GX	MREADY= ****** GX	SUCCS$= 000001
AT.INF  000002   	CR    = 000015   	ESC   = 000033   	NOSCOP= 000000   	SUMMAR= ****** GX
AT.LEN  000004   	CRFLAG  000000R     004	EXIT  = ****** GX	OPEN  = ****** GX	SUSPEN= ****** GX
AT.ON   100000   	CTRL$N= 000016   	EXSTAL= ****** GX	OUTOPN= ****** GX	SY.INI= ****** GX
AT.PRO  000010   	CTRL$O= 000017   	FATAL$= 000020   	PARITY= ****** GX	TAB   = 000011
AT.SYS  000020   	C$CONN  002270RG    002	FATERR= ****** GX	PARLST  000000R     003	TAKDEF  000454RG    003
AT.TYP  000040   	C$DIR   003104RG    002	FF    = 000014   	PAR$EV  000002   	TERMIN  177777
AT.XLE  000100   	C$DISM  003170RG    002	FILNAM= ****** GX	PAR$MA  000003   	TEXT    000000
BELL  = 000007   	C$EXIT  005106RG    002	FIXWIL= ****** GX	PAR$NO  000000   	TILDE = 000176
BINARY  000001   	C$IDLE= ****** GX	FPARSE= ****** GX	PAR$OD  000001   	TK.0    000004R     004
BS    = 000010   	C$MOUN  003174RG    002	GETCM0= ****** GX	PAR$SP  000004   	TK.1    000016R     004
B4SPEE= ****** GX	C$SET   000000RG    002	GETCM1= ****** GX	PORTS = ****** GX	TSXCL = ****** GX
CAPA.A= 000010   	C$SPAC  003100RG    002	GETCR0= ****** GX	PUTC  = ****** GX	TSXSAV= ****** GX
CAPA.L= 000002   	C$TAKE  002362RG    002	INCSTS= ****** GX	P.CAPA= 000011   	TSXVER= ****** GX
CAPA.S= 000004   	C$TYPE  003250RG    002	INDEX = ****** GX	P.CHKT= 000007   	TTNAME= ****** GX
CHKEXT= ****** GX	C.CRLF= 000004   	INDNAM= ****** GX	P.EOL = 000004   	TTSPEE= ****** GX
CLOSE = ****** GX	C.LCUC= 000040   	INFOMS= ****** GX	P.MXL1= 000013   	TTY   = 000001
CLSTAT= ****** GX	C.LSPA= 000010   	INQCD = ****** GX	P.MXL2= 000014   	TYPDEF  000461R     003
CL$LIN= ****** GX	C.MNT   003176R     002	INQDTR= ****** GX	P.NPAD= 000002   	T10$    000030R     004
CL.DUM= ****** GX	C.SSPA= 000020   	ISITCL  000422R     002	P.PADC= 000003   	T20$    000034R     004
CL.LIN= ****** GX	C.TSPA= 000200   	ISWILD= ****** GX	P.QBIN= 000006   	T30$    000051R     004
CL.NAM  000132R     004	DECNAT  000002   	ITSMIN  000002R     004	P.QCTL= 000005   	T40$    000055R     004
CL.PRI= ****** GX	DEFTER  004172RG    002	JSW   = 000044   	P.REPT= 000010   	T50$    000072R     004
CL.R50= ****** GX	DEL   = 000177   	KM.LOC= ****** GX	P.SPSI= 000000   	T60$    000075R     004
CL.UNI= ****** GX	DIRER$= ****** GX	KRTINC= 000001   	P.TIME= 000001   	T70$    000112R     004
CL.WIL  001306R     002	DOCONN= ****** GX	LASTCM= ****** GX	P.VEND= 000017   	T80$    000115R     004
CMDLUN= ****** GX	DODIR = ****** GX	LESS    000466R     003	P.WIND= 000012   	UNITS = ****** GX
CMD$AB= ****** GX	DOT   = 000056   	LF    = 000012   	P00$    000012R     003	UPCASE= ****** GX
CMD$BA= ****** GX	D.ALLO= ****** GX	LI.HI   000447R     003	P10$    000017R     003	UPONE = ****** GX
CMD$EX= ****** GX	ERBFSI= 000170   	LI.LO   000443R     003	P20$    000023R     003	USERRB= 000053
CMD$NX= ****** GX	ERRBYT= 000052   	LN$CNT= 000012   	P30$    000030R     003	VTTYPE= ****** GX
CMD$UN= ****** GX	ERROR$= 000004   	LN$MAX= 000204   	P40$    000035R     003	VT100 = 000002
CM1.01  000043R     003	ER$AOP= ****** GX	LOASET= ****** GX	QU.INI= ****** GX	VT200 = 000003
CM1.02  000055R     003	ER$BAD= ****** GX	LOG$AL= 000003   	REINIT= ****** GX	WARN$ = 000002
CM1.03  000067R     003	ER$EOF= ****** GX	LOG$CO= 000002   	RESTOF= ****** GX	WASNUL= ****** GX
CM1.04  000110R     003	ER$FNF= ****** GX	LOG$DE= 000020   	RTWORK= ****** GX	WRTALL= ****** GX
CM1.05  000155R     003	ER$NMF= ****** GX	LOG$IO= 000010   	R50DEV= ****** GX	XC.CON= ****** GX
CM1.06  000167R     003	ER$OWN= ****** GX	LOG$ON= 040000   	SCANCH= ****** GX	XL.DUM= ****** GX
CM1.07  000207R     003	ER$PRI= ****** GX	LOG$OP= 100000   	SCOLON= 000073   	XOFF  = 000023
CM1.08  000216R     003	ER$SAM= ****** GX	LOG$PA= 000001   	SD$OFF= ****** GX	XON   = 000021
CM1.09  000232R     003	ER$SUN= ****** GX	LOG$RP= 000004   	SETSPD= ****** GX	Z.ATCH= ****** GX
CM1.10  000250R     003	ER$TSX= ****** GX	LOOKUP= ****** GX	SETTLE= ****** GX	$ALLSI= 003614
CM1.11  000263R     003	ER$TT = ****** GX	LUN.IN= ****** GX	SET$LI= ****** GX	$$    = 000002
CM1.12  000267R     003	ER$V62= ****** GX	LUN.KB= ****** GX	SET$MO= ****** GX	$$1   = 000001
CM1.13  000271R     003	ER$122= ****** GX	LUN.OU= ****** GX	SEVER$= 000010   	$$2   = 000000
CM1.14  000316R     003	ER$123= ****** GX	LUN.SR= ****** GX	SHO$LI  004246RG    002	$$5   = 000027
CM1.15  000324R     003	ER$124= ****** GX	LUN.TA= ****** GX	SIGNON= ****** GX	...V1 = 000003
CM1.16  000335R     003	ER$137= ****** GX	L$LEN = ****** GX	SKIPIT  000350RG    002	...V2 = 000027
CM1.17  000346R     003	ER$140= ****** GX	L$PCRL= ****** GX	SOH   = 000001

. ABS.	000000    000	(RW,I,GBL,ABS,OVR)
KRTCM1	Misc commands overlay	MACRO V05.03b  00:00  Page 16-2
Symbol table

      	000000    001	(RW,I,LCL,REL,CON)
$CODE 	005222    002	(RO,I,LCL,REL,CON)
$PDATA	000504    003	(RO,D,LCL,REL,CON)
$RWDAT	000140    004	(RW,D,LCL,REL,CON)
Errors detected:  0

*** Assembler statistics


Work  file  reads: 12
Work  file writes: 13
Size of work file: 13248 Words  ( 52 Pages)
Size of core pool: 12800 Words  ( 50 Pages)
Operating  system: RT-11

Elapsed time: 00:00:00.47
KRTCM1,KRTCM1=KRTCM1
